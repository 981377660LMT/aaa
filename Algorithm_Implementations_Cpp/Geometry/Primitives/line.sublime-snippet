<snippet>
	<content><![CDATA[
// Requires point
template<class T>
struct line{
	point<T> p{}, d{}; // p + d*t
	line(){ }
	line(const line &l): p(l.p), d(l.d){ }
	template<class U, class V>
	line(const point<U> &p, const point<V> &q, bool Two_Points = true): p(p), d(Two_Points ? q - p : q){ }
	line(const point<T> &d): p(), d(d){ }
	line(T a, T b, T c): p(a ? -c / a : 0, !a && b ? -c / b : 0), d(-b, a){ }
	point<T> q() const{
		return p + d;
	}
	operator bool() const{
		return abs(d.x) > 1e-9 || abs(d.y) > 1e-9;
	}
	// d.y * (X - p.x) - d.x * (Y - p.y) = 0
	tuple<T, T, T> coef() const{
		return {d.y, -d.x, d.perp() * p};
	}
	bool operator||(const line<T> &L) const{
		return d || L.d;
	}
	line<double> translate(T x) const{
		auto dir = d.perp();
		return {point<double>(p) + dir.unit() * x, d, false};
	}
	line<long double> translatel(T x) const{
		auto dir = d.perp();
		return {point<long double>(p) + dir.unitl() * x, d, false};
	}
};
template<class T> istream &operator>>(istream &in, line<T> &l){
	in >> l.p >> l.d, l.d -= l.p;
	return in;
}
template<class T> ostream &operator<<(ostream &out, const line<T> &l){
	return out << "{" << l.p << " -> " << l.q() << "}";
}
template<class T>
bool on_line(const point<T> &p, const line<T> &L){
	return L ? p - L.p || L.d : p == L.p;
}
template<class T>
bool on_ray(const point<T> &p, const line<T> &L){
	return L ? (L.p - p || L.q() - p) && (L.p - p) * L.d <= 0 : p == L.p;
}
template<class T>
bool on_segment(const point<T> &p, const line<T> &L){
	return L ? (L.p - p || L.q() - p) && (L.p - p) * (L.q() - p) <= 0 : p == L.p;
}
template<class T>
bool on_open_segment(const point<T> &p, const line<T> &L){
	return L ? (L.p - p || L.q() - p) && (L.p - p) * (L.q() - p) < 0 : p == L.p;
}
template<class T>
double distance_to_line(const point<T> &p, const line<T> &L){
	return L ? abs(p - L.p ^ L.d) / L.d.norm() : distance(p, L.p);
}
template<class T>
long double distance_to_linel(const point<T> &p, const line<T> &L){
	return L ? abs(p - L.p ^ L.d) / L.d.norml() : distancel(p, L.p);
}
template<class T>
double distance_to_ray(const point<T> &p, const line<T> &L){
	return (p - L.p) * L.d <= 0 ? distance(p, L.p) : distance_to_line(p, L);
}
template<class T>
long double distance_to_rayl(const point<T> &p, const line<T> &L){
	return (p - L.p) * L.d <= 0 ? distancel(p, L.p) : distance_to_linel(p, L);
}
template<class T>
double distance_to_segment(const point<T> &p, const line<T> &L){
	return (p - L.p) * L.d <= 0 ? distance(p, L.p) : (p - L.q()) * L.d >= 0 ? distance(p, L.q()) : distance_to_line(p, L);
}
template<class T>
long double distance_to_segmentl(const point<T> &p, const line<T> &L){
	return (p - L.p) * L.d <= 0 ? distancel(p, L.p) : (p - L.q()) * L.d >= 0 ? distancel(p, L.q()) : distance_to_linel(p, L);
}
template<class T>
point<double> projection(const point<T> &p, const line<T> &L){
	return static_cast<point<double>>(L.p) + (L ? (p - L.p) * L.d / L.d.squared_norm() * point<double>(L.d) : point<double>());
}
template<class T>
point<long double> projectionl(const point<T> &p, const line<T> &L){
	return point<long double>(L.p) + (L ? (p - L.p) * L.d / L.d.squared_norml() * point<long double>(L.d) : point<long double>());
}
template<class T>
point<double> reflection(const point<T> &p, const line<T> &L){
	return 2.0 * projection(p, L) - point<double>(p);
}
template<class T>
point<long double> reflectionl(const point<T> &p, const line<T> &L){
	return 2.0l * projectionl(p, L) - point<long double>(p);
}
template<class T>
point<double> closest_point_on_segment(const point<T> &p, const line<T> &L){
	return (p - L.p) * L.d <= 0 ? point<double>(L.p) : ((p - L.q()) * L.d >= 0 ? point<double>(L.q()) : projection(p, L));
}
template<class T>
point<double> closest_point_on_segmentl(const point<T> &p, const line<T> &L){
	return (p - L.p) * L.d <= 0 ? point<long double>(L.p) : ((p - L.q()) * L.d >= 0 ? point<long double>(L.q()) : projectionl(p, L));
}

using lineint = line<int>;
using linell = line<long long>;
using linelll = line<__int128_t>;
using lined = line<double>;
using lineld = line<long double>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>line</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
