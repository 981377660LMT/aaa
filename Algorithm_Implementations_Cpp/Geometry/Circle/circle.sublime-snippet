<snippet>
	<content><![CDATA[
// T must be able to hold up to max(abs(x), abs(y), abs(r))^2
template<typename T>
struct circle{
	T x, y, r;
	friend istream &operator>>(istream &in, circle &c){
		return in >> c.x >> c.y >> c.r;
	}
	template<class U>
	U square(U x) const{
		return x * x;
	}
	T squared_distance(const circle &c) const{
		return square(x - c.x) + square(y - c.y);
	}
	bool contains(const array<T, 2> &p) const{
		return square(x - p[0]) + square(y - p[1]) <= square(r);
	}
	bool strictly_contains(const array<T, 2> &p) const{
		return square(x - p[0]) + square(y - p[1]) < square(r);
	}
	bool contains(const circle &c) const{
		return c.r <= r && squared_distance(c) <= square(r - c.r);
	}
	bool strictly_contains(const circle &c) const{
		return c.r < r && squared_distance(c) < square(r - c.r);
	}
	bool intersect(const circle &c) const{
		return square(r - c.r) <= squared_distance(c) && squared_distance(c) <= square(r + c.r);
	}
	bool intersect_at_one_point(const circle &c) const{
		return square(r - c.r) == squared_distance(c) || squared_distance(c) == square(r + c.r);
	}
	bool intersect_at_two_points(const circle &c) const{
		return square(r - c.r) < squared_distance(c) && squared_distance(c) < square(r + c.r);
	}
	// Returns the list of intersection points. the ordering "(c.x, c.y) -> list" forms a positive orientation
	template<class U>
	vector<array<U, 2>> intersections(const circle &c) const{
		if(!intersect(c)) return {};
		U dist = squared_distance(c);
		U A = (square(r) - square(c.r)) / (2 * dist);
		U B = (U)0.5 * sqrt((U)2 * (square(r) + square(c.r)) / dist - square<U>(square(r) - square(c.r)) / square(dist) - 1);
		return {
			{(U)0.5 * (x + c.x) + A * (c.x - x) + B * (c.y - y), (U)0.5 * (y + c.y) + A * (c.y - y) + B * (x - c.x)}
			, {(U)0.5 * (x + c.x) + A * (c.x - x) - B * (c.y - y), (U)0.5 * (y + c.y) + A * (c.y - y) - B * (x - c.x)}
		};
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>circle</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
