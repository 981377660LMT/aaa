<snippet>
	<content><![CDATA[
// T must be able to hold up to max(abs(x), abs(y), abs(r))^2
// Requires point
template<class T>
struct circle{
	point<T> center;
	T radius;
	circle(): center{}, radius{}{}
	template<class U, class V, class W>
	circle(U x, V y, W r): center(x, y), radius(r){ }
	template<class U>
	circle(const circle<U> &c): center(c.center), radius(c.radius){ }
	friend istream &operator>>(istream &in, circle &c){
		return in >> c.center >> c.radius;
	}
	bool operator==(const circle &c) const{
		return center == c.center && radius == c.radius;
	}
	bool operator!=(const circle &c) const{
		return center != c.center || radius != c.radius;
	}
	template<class U>
	U square(U x){
		return x * x;
	}
	bool contains(const point<T> &p) const{
		return squared_distance(center, p) <= square(radius);
	}
	bool strictly_contains(const point<T> &p) const{
		return squared_distance(center, p) < square(radius);
	}
	bool contains(const circle &c) const{
		return c.radius <= radius && squared_distance(center, c.center) <= square(radius - c.radius);
	}
	bool strictly_contains(const circle &c) const{
		return c.radius < radius && squared_distance(center, c.center) < square(radius - c.radius);
	}
	bool intersect(const circle &c) const{
		auto d = squared_distance(center, c.center);
		return square(radius - c.radius) <= d && d <= square(radius + c.radius);
	}
	bool intersect_at_one_point(const circle &c) const{
		auto d = squared_distance(center, c.center);
		return *this != c && (square(radius - c.radius) == d || d == square(radius + c.radius));
	}
	bool intersect_at_two_points(const circle &c) const{
		auto d = squared_distance(center, c.center);
		return square(radius - c.radius) < d && d < square(radius + c.radius);
	}
};

using circleint = circle<int>;
using circlell = circle<long long>;
using circlelll = circle<__int128_t>;
using circled = circle<double>;
using circleld = circle<long double>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>circle</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
