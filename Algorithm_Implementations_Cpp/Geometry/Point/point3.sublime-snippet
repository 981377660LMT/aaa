<snippet>
	<content><![CDATA[
template<class T>
struct point3{
	T x{}, y{}, z{};
	point3(){ }
	template<class U> point3(const point3<U> &otr): x(otr.x), y(otr.y), z(otr.z){ }
	template<class U, class V, class W> point3(U x, V y, W z): x(x), y(y), z(z){ }
	template<class U> point3(const array<U, 3> &p): x(p[0]), y(p[1]), z(p[2]){ }
	template<class U> operator array<U, 3>() const{
		return {x, y, z};
	}
	T operator*(const point3 &otr) const{
		return x * otr.x + y * otr.y + z * otr.z;
	}
	point3 operator^(const point3 &otr) const{
		return {y * otr.z - z * otr.y, z * otr.x - x * otr.z, x * otr.y - y * otr.x};
	}
	point3 operator+(const point3 &otr) const{
		return {x + otr.x, y + otr.y, z + otr.z};
	}
	point3 &operator+=(const point3 &otr){
		return *this = *this + otr;
	}
	point3 operator-(const point3 &otr) const{
		return {x - otr.x, y - otr.y, z - otr.z};
	}
	point3 &operator-=(const point3 &otr){
		return *this = *this - otr;
	}
	point3 operator-() const{
		return {-x, -y, -z};
	}
#define scalarop_l(op) friend point3 operator op(const T &c, const point3 &p){ return {c op p.x, c op p.y, c op p.z}; }
	scalarop_l(+) scalarop_l(-) scalarop_l(*) scalarop_l(/)
#define scalarop_r(op) point3 operator op(const T &c) const{ return {x op c, y op c, z op c}; }
	scalarop_r(+) scalarop_r(-) scalarop_r(*) scalarop_r(/)
#define scalarapply(op) point3 &operator op(const T &c){ return *this = *this op c; }
	scalarapply(+=) scalarapply(-=) scalarapply(*=) scalarapply(/=)
#define compareop(op) bool operator op(const point3 &otr) const{ return tuple(x, y, z) op tuple(otr.x, otr.y, otr.z); }
	compareop(>) compareop(<) compareop(>=) compareop(<=) compareop(==) compareop(!=)
#undef scalarop_l
#undef scalarop_r
#undef scalarapply
#undef compareop
	double norm() const{
		return sqrt(x * x + y * y + z * z);
	}
	double norml() const{
		return sqrtl(x * x + y * y + z * z);
	}
	T squared_norm() const{
		return x * x + y * y + z * z;
	}
	point3<double> unit() const{
		return point3<double>(x, y, z) / norm();
	}
	point3 reflect_x() const{
		return {x, -y, -z};
	}
	point3 reflect_y() const{
		return {-x, y, -z};
	}
	point3 reflect_z() const{
		return {-x, -y, z};
	}
	point3 reflect_xy() const{
		return {x, y, -z};
	}
	point3 reflect_yz() const{
		return {-x, y, z};
	}
	point3 reflect_zx() const{
		return {x, -y, z};
	}
	point3 reflect(const point3 &o = {}) const{
		return {2 * o.x - x, 2 * o.y - y, 2 * o.z - z};
	}
	bool operator||(const point3 &otr) const{
		auto d = *this ^ otr;
		return abs(d.x) <= 1e-9 && abs(d.y) <= 1e-9 && abs(d.z) <= 1e-9;
	}
};
template<class T> istream &operator>>(istream &in, point3<T> &p){
	return in >> p.x >> p.y >> p.z;
}
template<class T> ostream &operator<<(ostream &out, const point3<T> &p){
	return out << "{" << p.x << ", " << p.y << ", " << p.z << "}";
}
template<class T>
double distance(const point3<T> &p, const point3<T> &q){
	return (p - q).norm();
}
template<class T>
long double distancel(const point3<T> &p, const point3<T> &q){
	return (p - q).norml();
}
template<class T>
T squared_distance(const point3<T> &p, const point3<T> &q){
	return (p - q).squared_norm();
}
template<class T>
double angle(const point3<T> &p, const point3<T> &q){
	return atan2((p ^ q).norm(), p * q);
}
template<class T>
long double anglel(const point3<T> &p, const point3<T> &q){
	return atan2l((p ^ q).norml(), p * q);
}

using point3int = point3<int>;
using point3ll = point3<long long>;
using point3lll = point3<__int128_t>;
using point3d = point3<double>;
using point3ld = point3<long double>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>point3</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
