<snippet>
	<content><![CDATA[
// Requires modular
template<class T>
struct hasher_base{
	static T base;
	static vector<T> power;
	int n;
	vector<T> prefix, suffix;
	hasher_base(){ }
	template<class Str>
	hasher_base(const Str &s, bool initialize_inverse = false){
		init(s, initialize_inverse);
	}
	template<class Str>
	void init(const Str &s, bool initialize_inverse = false){
		n = (int)s.size();
		while((int)power.size() <= n) power = T::precalc_power(base, (int)power.size() << 1);
		prefix.assign(n + 1, 0);
		for(auto i = 0; i < n; ++ i) prefix[i + 1] = prefix[i] * base + s[i];
		if(initialize_inverse){
			suffix.assign(n + 1, 0);
			for(auto i = n - 1; i >= 0; -- i) suffix[i] = suffix[i + 1] * base + s[i];
		}
	}
	template<class Str>
	static T hash(const Str &s){
		T x = 0;
		for(auto c: s) x = x * base + c;
		return x;
	}
	template<class Str>
	static T inverse_hash(const Str &s){
		T x = 0;
		for(auto i = (int)s.size() - 1; i >= 0; -- i) x = x * base + s[i];
		return x;
	}
	T hash(int l, int r) const{
		assert(0 <= l && l <= r && r <= n);
		assert((int)prefix.size() == n + 1);
		return prefix[r] - prefix[l] * power[r - l];
	}
	T inverse_hash(int l, int r) const{
		assert(0 <= l && l <= r && r <= n);
		assert((int)suffix.size() == n + 1);
		return suffix[l] - suffix[r] * power[r - l];
	}
	bool is_palindrome(int l, int r) const{
		return hash(l, r) == inverse_hash(l, r);
	}
	template<class Str>
	vector<int> find_occurences(const Str &s) const{
		T x = hash(x);
		vector<int> res;
		for(auto m = (int)s.size(), i = 0; i + m <= n; ++ i) if(x == hash(i, i + m)) res.push_back(i);
		return res;
	}
};
template<class T> T hasher_base<T>::base = mt19937(chrono::high_resolution_clock::now().time_since_epoch().count())() % 700'000'000 + 1'300'000'000;
template<class T> vector<T> hasher_base<T>::power = {1};

using hasher = hasher_base<modular_fixed_base<1'000'000'007>>;
// using hasher = hasher_base<modular_fixed_base<1'000'000'009>>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hasher</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
