<snippet>
	<content><![CDATA[
// Requires Zp and random
template<class Zp>
struct polynomial_hash{
	int SZ;
	Zp base;
	vector<Zp> pow;
	polynomial_hash(int SZ): SZ(SZ), base(rng() % int(2e9) + int(1e8)), pow(precalc_power(base, SZ)){ }
	template<class Str>
	void find_matches(const Str &text, const Str &pattern, function<void(int)> act, int th = numeric_limits<int>::max()){
		int n = (int)text.size(), m = (int)pattern.size();
		if(n < m) return;
		Zp tval = 0, pval = 0;
		for(auto i = 0; i < m - 1; ++ i) tval = tval * base + text[i];
		for(auto i = 0; i < m; ++ i) pval = pval * base + pattern[i];
		for(auto i = 0; i <= n - m && th; ++ i){
			tval = tval * base + text[i + m - 1];
			if(tval == pval) -- th, act(i);
			tval -= pow[m - 1] * text[i];
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>polynomial_hash</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
