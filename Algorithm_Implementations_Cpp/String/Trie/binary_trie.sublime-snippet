<snippet>
	<content><![CDATA[
template<class T, int mx = 30>
struct binary_trie{
	vector<array<int, 3>> next{{0, 0, 0}}; // leftchild, rightchild, count
	binary_trie(){ }
	binary_trie(const vector<T> &a){
		for(auto x: a) insert(x);
	}
	void insert(T x){
		for(int bit = mx - 1, u = 0; bit >= 0; -- bit){
			if(!next[u][!!(x & T(1) << bit)]){
				next[u][!!(x & T(1) << bit)] = (int)next.size();
				next.push_back({0, 0, 0});
			}
			u = next[u][!!(x & T(1) << bit)];
			++ next[u][2];
		}
	}
	void erase(T x){
		for(int bit = mx - 1, u = 0; bit >= 0; -- bit){
			u = next[u][!!(x & T(1) << bit)];
			-- next[u][2];
		}
	}
	T max_xor(T x){
		T res = 0;
		for(int bit = mx - 1, u = 0; bit >= 0; -- bit){
			if(!next[u][!(x & T(1) << bit)] || !next[next[u][!(x & T(1) << bit)]][2]) u = next[u][!!(x & T(1) << bit)];
			else{
				res |= T(1) << bit;
				u = next[u][!(x & T(1) << bit)];
			}
		}
		return res;
	}
	T min_xor(T x){
		T res = 0;
		for(int bit = mx - 1, u = 0; bit >= 0; -- bit){
			if(!next[u][!!(x & T(1) << bit)] || !next[next[u][!!(x & T(1) << bit)]][2]){
				res |= T(1) << bit;
				u = next[u][!(x & T(1) << bit)];
			}
			else u = next[u][!!(x & T(1) << bit)];
		}
		return res;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>binary_trie</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
