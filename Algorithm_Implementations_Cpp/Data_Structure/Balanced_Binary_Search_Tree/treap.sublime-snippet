<snippet>
	<content><![CDATA[
template<class T>
struct treap{
	vector<int> left, right, priority, internal_size;
	vector<T> data;
	treap(){ }
	void refresh(int u){
		internal_size[u] = (~left[u] ? internal_size[left[u]] : 0) + 1 + (~right[u] ? internal_size[right[u]] : 0);
	}
	void heapify(int u){
		if(~u){
			int v = u;
			if(~left[u] && priority[left[u]] > priority[v]) v = left[u];
			if(~right[u] && priority[right[u]] > priority[v]) v = right[u];
			if(u != v) swap(priority[u], priority[v]), heapify(v);
		}
	}
	int size(int u){
		return ~u ? internal_size[u] : 0;
	}
	// Split into [0, x), [x, inf)
	// Data must be sorted
	// O(log n)
	template<class Compare = less<>>
	pair<int, int> split_by_key(int u, T x, Compare cmp = less<>()){
		if(!~u) return {-1, -1};
		if(cmp(data[u], x)){
			auto [a, b] = split_by_key(right[u], x, cmp);
			right[u] = a, refresh(u);
			return {u, b};
		}
		else{
			auto [a, b] = split_by_key(left[u], x, cmp);
			left[u] = b, refresh(u);
			return {a, u};
		}
	}
	// Split into [0, pos), [pos, inf)
	// O(log n)
	pair<int, int> split_by_order(int u, int pos){
		if(!~u) return {-1, -1};
		if(size(left[u]) < pos){
			auto [a, b] = split_by_order(right[u], pos - size(left[u]) - 1);
			right[u] = a, refresh(u);
			return {u, b};
		}
		else{
			auto [a, b] = split_by_order(left[u], pos);
			left[u] = b, refresh(u);
			return {a, u};
		}
	}
	// Split to [True Segment], [False Segment]
	// Data must be sorted
	// O(log n)
	pair<int, int> split_by_pred(int u, auto pred){
		if(!~u) return {-1, -1};
		if(pred(u)){
			auto [a, b] = split_by_pred(right[u], pred);
			right[u] = a, refresh(u);
			return {u, b};
		}
		else{
			auto [a, b] = split_by_pred(left[u], pred);
			left[u] = b, refresh(u);
			return {a, u};
		}
	}
	// Split into [0, l), [l, r), [r, inf)
	// O(log n)
	tuple<int, int, int> split_to_three(int u, int l, int r){
		assert(0 <= l && l <= r && r <= size(u));
		if(!~u) return {-1, -1, -1};
		int a, b, c;
		tie(a, b) = split_by_order(u, l);
		tie(b, c) = split_by_order(b, r - l);
		return {a, b, c};
	}
	// Append u and v
	// O(log n)
	int append(int u, int v){
		if(!~u || !~v) return ~u ? u : v;
		if(priority[v] < priority[u]){
			right[u] = append(right[u], v), refresh(u);
			return u;
		}
		else{
			left[v] = append(u, left[v]), refresh(v);
			return v;
		}
	}
	// Append treaps in order
	// O((list length) * log n)
	int append(initializer_list<int> list){
		return accumulate(list.begin(), list.end(), -1, [&](int u, int v){ return append(u, v); });
	}
	// Data must be sorted
	// O(log n)
	template<class Compare = less<>>
	int insert_by_key(int u, int v, Compare cmp = less<>()){
		if(!~u) return v;
		auto [a, b] = split_by_key(u, data[v], cmp);
		return append(append(a, v), b);
	}
	// O(log n)
	int insert_by_order(int u, int v, int pos){
		if(!~u) return v;
		auto [a, b] = split_by_order(u, pos);
		return append(append(a, v), b);
	}
	// Erase the smallest element >= x and returns a pair of {new root, erased element}
	// Data must be sorted
	// O(log n)
	template<class Compare = less<>>
	pair<int, int> erase_by_key(int u, T x, Compare cmp = less<>()){
		if(!~u) return {-1, -1};
		int a, b, c;
		tie(a, b) = split_by_key(u, x, cmp);
		tie(b, c) = split_by_order(b, 1);
		return {append(a, c), b};
	}
	// O(log n)
	pair<int, int> erase_by_order(int u, int pos){
		if(!~u) return {-1, -1};
		auto [a, b, c] = split_to_three(u, pos, pos + 1);
		return {append(a, c), b};
	}
	// Data must be sorted
	// O(min(size(u), size(v)) * log(size ratio))
	template<class Compare = less<>>
	int unite_by_key(int u, int v, Compare cmp = less<>()){
		if(!~u || !~v) return ~u ? u : v;
		if(priority[u] < priority[v]) swap(u, v);
		auto [a, b] = split_by_key(v, data[u], cmp);
		left[u] = unite_by_key(left[u], a, cmp);
		right[u] = unite_by_key(right[u], b, cmp);
		refresh(u);
		return u;
	}
	void traverse(int u, auto f){
		if(~u){
			traverse(left[u], f);
			f(u);
			traverse(right[u], f);
			refresh(u);
		}
	}
	template<class output_stream>
	output_stream &print(output_stream &out, int u){
		out << "[";
		traverse(u, [&](int u){ out << data[u] << ", "; });
		return out << "\b\b]";
	}
	int new_node(T x, int v = -1, int w = -1){
		static mt19937 rng(1564);
		int u = (int)data.size();
		left.push_back(v);
		right.push_back(w);
		priority.push_back(rng());
		internal_size.push_back(1);
		data.push_back(x);
		heapify(u);
		refresh(u);
		return u;
	}
	int build(int n){
		return build(vector<T>(n, T{}));
	}
	int build(int n, T init){
		return build(vector<T>(n, init));
	}
	int build(const vector<T> &a){
		auto recurse = [&](auto self, int l, int r)->int{
			if(l == r) return -1;
			int m = l + (r - l >> 1);
			return new_node(a[m], self(self, l, m), self(self, m + 1, r));
		};
		return recurse(recurse, 0, (int)a.size());
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>treap</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
