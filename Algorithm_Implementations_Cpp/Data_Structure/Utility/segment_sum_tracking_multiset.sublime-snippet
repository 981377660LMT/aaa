<snippet>
	<content><![CDATA[
// Solves https://codeforces.com/contest/799/problem/E
// Requires order_statistics_trees
template<class T, class U, class Compare = less<>, class Plus = plus<>, class Minus = minus<>>
struct segment_sum_tracking_multiset{
	order_statistic_set<pair<T, int>, Compare> data;
	int l = 0, r = 0, default_index;
	Compare cmp;
	U sum;
	Plus op;
	Minus inv_op;
	segment_sum_tracking_multiset(int default_index = numeric_limits<int>::min(), Compare cmp = less<>(), U U_id = {}, Plus op = plus<>(), Minus inv_op = minus<>()): default_index(default_index), sum(U_id), cmp(cmp), op(op), inv_op(inv_op){ }
	void insert(T x){
		static int counter = 0;
		int pos = data.order_of_key({x, default_index});
		if(pos < r) sum = inv_op(op(sum, l <= pos ? x : data.find_by_order(l - 1)->first), data.find_by_order(r - 1)->first);
		data.insert({x, counter ++});
	}
	void erase(T x){
		assert(r < (int)data.size());
		int pos = data.order_of_key({x, default_index});
		if(pos < r) sum = op(inv_op(sum, l <= pos ? x : data.find_by_order(l)->first), data.find_by_order(r)->first);
		data.erase(data.lower_bound({x, default_index}));
	}
	void inc_l(){
		assert(l < r);
		sum = inv_op(sum, data.find_by_order(l ++)->first);
	}
	void dec_l(){
		assert(l);
		sum = op(sum, data.find_by_order(-- l)->first);
	}
	void inc_r(){
		assert(r < (int)data.size());
		sum = op(sum, data.find_by_order(r ++)->first);
	}
	void dec_r(){
		assert(l < r);
		sum = inv_op(sum, data.find_by_order(-- r)->first);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_sum_tracking_multiset</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
