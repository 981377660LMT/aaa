<snippet>
	<content><![CDATA[
template<bool GET_MAX = true>
struct kinetic_tournament{
	const long long inf = numeric_limits<long long>::max();
	typedef pair<long long, long long> line;
	inline long long eval(const line& ln, long long t){
		return ln.first * t + ln.second;
	}
	inline bool cmp(const line& line1, const line& line2){
		auto x = eval(line1, temp), y = eval(line2, temp);
		if(x != y) return x < y;
		return line1.first < line2.first;
	}
	long long next_isect(const line& line1, const line& line2){
		if(line1.first > line2.first){
			long long delta = eval(line2, temp) - eval(line1, temp), delta_slope = line1.first - line2.first;
			assert(delta > 0);
			long long mint = temp + (delta - 1) / delta_slope + 1;
			return mint > temp ? mint : inf;  // prevent overflow
		}
		return inf;
	}
	void rebuild(int u, int l, int r){
		if(r - l == 1 || melt[u] > temp) return;
		int m = l + (r - l >> 1), v = u + 1, w = u + (m - l << 1);
		rebuild(v, l, m), rebuild(w, m, r);
		auto line1 = tree[v], line2 = tree[w];
		if(!cmp(line1, line2)) swap(line1, line2);
		tree[u] = line1, melt[u] = min(melt[v], melt[w]);
		if(line1 != line2){
			long long t = next_isect(line1, line2);
			assert(t > temp);
			melt[u] = min(melt[u], t);
		}
	}
	void set(int p, line L){ // set line[p] = L, O(log n)
		if(GET_MAX) L = {-L.first, -L.second};
		function<void(int, int, int)> recurse = [&](int u, int l, int r){
			if(p < l || r <= p) return;
			if(r - l == 1){
				tree[u] = L;
				return;
			}
			int m = l + (r - l >> 1);
			recurse(u + 1, l, m), recurse(u + (m - l << 1), m, r);
			melt[u] = 0, rebuild(u, l, r);
		};
		recurse(0, 0, n);
	}
	long long query(int ql, int qr){ // Find min{ql<=i<qr}( line[i].eval(temp) ), O(log n)
		function<long long(int, int, int)> recurse = [&](int u, int l, int r){
			if(qr <= l || r <= ql) return inf;
			if(ql <= l && r <= qr) return eval(tree[u], temp);
			int m = l + (r - l >> 1);
			return min(recurse(u + 1, l, m), recurse(u + (m - l << 1), m, r));
		};
		return recurse(0, 0, n) * (GET_MAX ? -1 : 1);
	}
	void heaten(long long new_temp){ // Increase temperature to new_temp, O(m alpha(m) log^2 n) for m sequence of operations
		assert(new_temp >= temp);
		temp = new_temp;
		rebuild(0, 0, n);
	}
	kinetic_tournament(int n): kinetic_tournament(vector<line>(n, {0, inf})){ }
	kinetic_tournament(vector<line> lines): n((int)lines.size()), tree(n << 1, {0, inf}), melt(n << 1, inf){
		if(GET_MAX) for(auto &L: lines) L = {-L.first, -L.second};
		function<void(int, int, int)> build = [&](int u, int l, int r){
			if(r - l == 1){
				tree[u] = lines[l];
				return;
			}
			int m = l + (r - l >> 1), v = u + 1, w = u + (m - l << 1);
			build(v, l, m), build(w, m, r);
			auto line1 = tree[v], line2 = tree[w];
			if(!cmp(line1, line2)) swap(line1, line2);
			tree[u] = line1, melt[u] = min(melt[v], melt[w]);
			if(line1 != line2){
				long long t = next_isect(line1, line2);
				assert(t > temp);
				melt[u] = min(melt[u], t);
			}
		};
		build(0, 0, n);
	}
	int n; // size
	long long temp = 0; // current temperature
	vector<line> tree; // tournament tree
	vector<long long> melt; // melting temperature of each subtree
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kinetic_tournament</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
