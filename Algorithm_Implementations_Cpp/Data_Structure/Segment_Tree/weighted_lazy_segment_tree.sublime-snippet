<snippet>
	<content><![CDATA[
// for fast hld
template<class T, class U, class F1, class F2, class F3, class F4>
struct weighted_lazy_segment_tree{
	int n;
	vector<T> data;
	vector<U> updates;
	vector<int> root, m;
	vector<array<int, 2>> range;
	F1 TT; // monoid operation (always adjacent)
	T T_id; // monoid identity
	F2 UU; // semigroup operation (superset, subset)
	F3 U_init; // semigroup default element for the interval [l, r)
	F4 UT; // action of U on T (superset, subset)
	weighted_lazy_segment_tree(int n, const vector<int> &partition, const vector<int> &weights, F1 TT, T T_id, F2 UU, F3 U_init, F4 UT): weighted_lazy_segment_tree(vector<T>(n, T_id), partition, weights, TT, T_id, UU, U_init, UT){ }
	weighted_lazy_segment_tree(int n, const vector<int> &partition, const vector<int> &weights, T init, F1 TT, T T_id, F2 UU, F3 U_init, F4 UT): weighted_lazy_segment_tree(vector<T>(n, init), partition, weights, TT, T_id, UU, U_init, UT){ }
	weighted_lazy_segment_tree(const vector<T> &a, const vector<int> &partition, const vector<int> &weights, F1 TT, T T_id, F2 UU, F3 U_init, F4 UT): n((int)a.size()), data(n << 1, T_id), updates(n << 1), root(n + 1), range(n + 1), m(n << 1), TT(TT), T_id(T_id), UU(UU), U_init(U_init), UT(UT){
		vector<long long> pref(n + 1);
		for(auto i = 0; i < n; ++ i) pref[i + 1] = pref[i] + weights[i];
		assert(accumulate(partition.begin(), partition.end(), 0) == n);
		int u = 0, l = 0, r = 0;
		for(auto len: partition){
			assert(len >= 1);
			r += len;
			for(auto i = l; i < r; ++ i) root[i] = u, range[i] = {l, r};
			build(a, pref, u, l, r);
			u += 2 * len - 1, l = r;
		}
		root[l] = u;
		range[n] = {l, l};
	}
	void build(const vector<T> &a, const vector<long long> &pref, int u, int l, int r){
		if(l + 1 == r) data[u] = a[l], updates[u] = U_init(l, r);
		else{
			m[u] = partition_point(pref.begin() + (l + 1), pref.begin() + (r - 1), [&](auto x){ return x - pref[l] < pref[r] - x; }) - pref.begin();
			assert(l < m[u] && m[u] < r);
			int v = u + 1, w = u + (m[u] - l << 1);
			build(a, pref, v, l, m[u]), build(a, pref, w, m[u], r);
			data[u] = TT(data[v], data[w]), updates[u] = U_init(l, r);
		}
	}
	void push(int u, int l, int r){ // push the internal node u
		int v = u + 1, w = u + (m[u] - l << 1);
		data[v] = UT(updates[u], data[v]);
		updates[v] = UU(updates[u], updates[v]);
		data[w] = UT(updates[u], data[w]);
		updates[w] = UU(updates[u], updates[w]);
		updates[u] = U_init(l, r);
	}
	void refresh(int u, int l, int r){
		data[u] = UT(updates[u], TT(data[u + 1], data[u + (m[u] - l << 1)]));
	}
	void set(int p, T x){
		auto recurse = [&](auto recurse, int u, int l, int r)->void{
			if(p < l || r <= p) return;
			if(p == l && p + 1 == r){
				data[u] = x, updates[u] = U_init(l, r);
				return;
			}
			push(u, l, r);
			recurse(recurse, u + 1, l, m[u]), recurse(recurse, u + (m[u] - l << 1), m[u], r);
			refresh(u, l, r);
		};
		recurse(recurse, root[p], range[p][0], range[p][1]);
	}
	void update(int p, U f){
		auto recurse = [&](auto recurse, int u, int l, int r)->void{
			if(p < l || r <= p) return;
			if(p == l && p + 1 == r){
				data[u] = UT(f, data[u]), updates[u] = UU(f, updates[u]);
				return;
			}
			push(u, l, r);
			recurse(recurse, u + 1, l, m[u]), recurse(recurse, u + (m[u] - l << 1), m[u], r);
			refresh(u, l, r);
		};
		recurse(recurse, root[p], range[p][0], range[p][1]);
	}
	// assumes [ql, qr) lies within the same partition
	void update(int ql, int qr, U f){ // Apply f to values at [ql, qr)
		auto recurse = [&](auto recurse, int u, int l, int r)->void{
			if(qr <= l || r <= ql) return;
			if(ql <= l && r <= qr){
				data[u] = UT(f, data[u]), updates[u] = UU(f, updates[u]);
				return;
			}
			push(u, l, r);
			recurse(recurse, u + 1, l, m[u]), recurse(recurse, u + (m[u] - l << 1), m[u], r);
			refresh(u, l, r);
		};
		recurse(recurse, root[ql], range[ql][0], range[ql][1]);
	}
	// assumes [ql, qr) lies within the same partition
	T query(int ql, int qr){ // Get the query result for [ql, qr)
		auto recurse = [&](auto recurse, int u, int l, int r)->T{
			if(qr <= l || r <= ql) return T_id;
			if(ql <= l && r <= qr) return data[u];
			push(u, l, r);
			return TT(recurse(recurse, u + 1, l, m[u]), recurse(recurse, u + (m[u] - l << 1), m[u], r));
		};
		return recurse(recurse, root[ql], range[ql][0], range[ql][1]);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>weighted_lazy_segment_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
