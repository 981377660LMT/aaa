<snippet>
	<content><![CDATA[
template<class B, class T>
struct persistent_dynamic_segment_tree{
	B n; // exclusive upper bound of coordinate
	vector<int> left, right;
	vector<T> data;
	function<T(T, T)> TT; // monoid operation (always adjacent)
	T T_id; // monoid identity
	function<T(B, B)> T_init; // monoid default element for the interval [l, r)
	persistent_dynamic_segment_tree(B n, function<T(T, T)> TT, T T_id, function<T(B, B)> T_init): n(n), TT(TT), T_id(T_id), T_init(T_init){
		new_state(-1, -1, T_init(0, n));
	}
	persistent_dynamic_segment_tree(const vector<T> &a, function<T(T, T)> TT, T T_id): n((int)a.size()), TT(TT), T_id(T_id){
		build(a);
	}
	int last_state(){
		return (int)data.size() - 1;
	}
	int new_state(int v, int w, T x){
		left.push_back(v), right.push_back(w), data.push_back(x);
		return last_state();
	}
	int build(const vector<T> &a){
		function<int(B, B)> recurse = [&](B l, B r){
			if(r - l == 1) return new_state(-1, -1, a[l]);
			B m = l + (r - l >> 1);
			int v = recurse(l, m), w = recurse(m, r);
			return new_state(v, w, TT(data[v], data[w]));
		};
		return recurse(0, (int)a.size());
	}
	void extend(int u, B l, B r){
		if(!~left[u]){
			B m = l + (r - l >> 1);
			left[u] = new_state(-1, -1, T_init(l, m));
			right[u] = new_state(-1, -1, T_init(m, r));
		}
	}
	int set(int u, B p, T x){ // set v[p] = x at state u, O(log n)
		function<int(int, B, B)> recurse = [&](int u, B l, B r){
			if(r - l == 1) return new_state(-1, -1, x);
			extend(u, l, r);
			B m = l + (r - l >> 1);
			int v = left[u], w = right[u];
			if(p < m) v = recurse(v, l, m);
			else w = recurse(w, m, r);
			return new_state(v, w, TT(data[v], data[w]));
		};
		return recurse(u, 0, n);
	}
	// find sum{ql<=i<qr}(v[i]) at state u, O(log n)
	T query(int u, B ql, B qr){
		function<T(int, B, B)> recurse = [&](int u, B l, B r){
			if(qr <= l || r <= ql) return T_id;
			if(ql <= l && r <= qr) return data[u];
			extend(u, l, r);
			B m = l + (r - l >> 1);
			return TT(recurse(left[u], l, m), recurse(right[u], m, r));
		};
		return recurse(u, 0, n);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>persistent_dynamic_segment_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
