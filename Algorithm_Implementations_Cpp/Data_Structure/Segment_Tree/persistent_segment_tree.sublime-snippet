<snippet>
	<content><![CDATA[
template<class T, class F>
struct persistent_segment_tree{
	int n;
	vector<int> left, right;
	vector<T> data;
	F TT; // monoid operation (always adjacent)
	T T_id; // monoid identity
	persistent_segment_tree(int n, F TT, T T_id): persistent_segment_tree(vector<T>(n, T_id), TT, T_id){ }
	persistent_segment_tree(int n, T init, F TT, T T_id): persistent_segment_tree(vector<T>(n, init), TT, T_id){ }
	persistent_segment_tree(const vector<T> &a, F TT, T T_id): TT(TT), T_id(T_id){
		build(a);
	}
	persistent_segment_tree &operator=(const persistent_segment_tree &pseg){
		n = pseg.n;
		left = pseg.left;
		right = pseg.right;
		data = pseg.data;
		return *this;
	}
	int last_state() const{
		return (int)data.size() - 1;
	}
	int new_state(int l, int r, T x){
		left.push_back(l);
		right.push_back(r);
		data.push_back(x);
		return last_state();
	}
	// O(n)
	int build(const vector<T> &a){
		n = (int)a.size();
		left.clear();
		right.clear();
		data.clear();
		if(a.empty()) return new_state(-1, -1, T_id);
		auto recurse = [&](auto self, int l, int r)->int{
			if(r - l == 1) return new_state(-1, -1, a[l]);
			int m = l + (r - l >> 1);
			int v = self(self, l, m), w = self(self, m, r);
			return new_state(v, w, TT(data[v], data[w]));
		};
		return recurse(recurse, 0, (int)a.size());
	}
	// Assumes u represents an interval of size n
	// O(log(n))
	int set(int u, int p, T x){
		assert(0 <= p && p < n);
		auto recurse = [&](auto self, int u, int l, int r)->int{
			if(r - l == 1) return new_state(-1, -1, x);
			int m = l + (r - l >> 1), v = left[u], w = right[u];
			if(p < m) v = self(self, v, l, m);
			else w = self(self, w, m, r);
			return new_state(v, w, TT(data[v], data[w]));
		};
		return recurse(recurse, u, 0, n);
	}
	// Assumes u represents an interval of size n
	// O(log(n))
	T query(int u, int ql, int qr) const{
		assert(0 <= ql && ql <= qr && qr <= n);
		auto recurse = [&](auto self, int u, int l, int r)->T{
			if(qr <= l || r <= ql) return T_id;
			if(ql <= l && r <= qr) return data[u];
			int m = l + (r - l >> 1);
			return TT(self(self, left[u], l, m), self(self, right[u], m, r));
		};
		return recurse(recurse, u, 0, n);
	}
	// pred(sum[l, r)) is T, T, ..., T, F, F, ..., F
	// Returns max r with T
	// Assumes u represents an interval of size n
	// O(log(n))
	int max_pref(int u, int ql, auto pred) const{
		assert(0 <= ql && ql <= n && pred(T_id));
		if(ql == n) return ql;
		T pref = T_id;
		auto recurse = [&](auto self, int u, int l, int r)->int{
			if(r <= ql) return -1;
			if(ql <= l && pred(TT(pref, data[u]))){
				pref = TT(pref, data[u]);
				return -1;
			}
			if(r - l == 1) return l;
			int m = l + (r - l >> 1), p = self(self, left[u], l, m);
			return ~p ? p : self(self, right[u], m, r);
		};
		int qr = recurse(recurse, u, 0, n);
		if(!~qr) qr = n;
		return qr;
	}
	// pred(sum[l, r)) is F, F, ..., F, T, T, ..., T
	// Returns min l with T
	// Assumes u represents an interval of size n
	// O(log(n))
	int min_suff(int u, int qr, auto pred) const{
		assert(0 <= qr && qr <= n && pred(T_id));
		if(qr == 0) return qr;
		T suff = T_id;
		auto recurse = [&](auto self, int u, int l, int r)->int{
			if(qr <= l) return -1;
			if(r <= qr && pred(TT(data[u], suff))){
				suff = TT(data[u], suff);
				return -1;
			}
			if(r - l == 1) return r;
			int m = l + (r - l >> 1), p = self(self, right[u], m, r);
			return ~p ? p : self(self, left[u], l, m);
		};
		int ql = recurse(recurse, u, 0, n);
		if(!~ql) ql = 0;
		return ql;
	}
	// Assumes u represents an interval of size n
	template<class output_stream>
	output_stream &print(output_stream &out, int u) const{
		#ifdef LOCAL
		if(!n) return out << "{}\n";
		out << "{";
		auto dfs = [&](auto self, int u, int l, int r)->void{
			if(r - l == 1){
				out << data[u] << ", ";
				return;
			}
			int m = l + (r - l >> 1);
			self(self, left[u], l, m), self(self, right[u], m, r);
		};
		dfs(dfs, u, 0, n);
		out << "\b\b}\n";
		#endif
		return out;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>persistent_segment_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
