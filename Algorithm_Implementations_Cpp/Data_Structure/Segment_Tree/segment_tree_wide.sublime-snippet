<snippet>
	<content><![CDATA[
// Very fast segtree from https://en.algorithmica.org/hpc/data-structures/segment-trees/
// T must be a group and support vectorization
template<int size, class T, class F, class I>
struct segment_tree_wide_base{
	static_assert(size > 0 && __builtin_popcount(size) == 1);
	static constexpr int cache_size = 64;
	static constexpr int reg_size = 32;
	static constexpr int reg_count = cache_size / reg_size;
	static constexpr int branching = cache_size / sizeof(T);
	static constexpr int branching_bits = __lg(branching);
	static constexpr int round(int k){
		return k & ~(branching - 1);  // = k / branching * branching
	}
	static constexpr int ceil(int k){
		return (k + branching - 1) & ~(branching - 1);
	}
	typedef T __attribute__((vector_size(reg_size))) Twide;
	struct Precalc{
		alignas(cache_size) T mask[branching][branching];
		constexpr Precalc(): mask{}{
			for(auto i = 0; i < branching; ++ i) for(auto j = 0; j < branching; ++ j) mask[i][j] = -(i < j);
		}
	};
	static constexpr Precalc precalc{};
	static constexpr int calc_height(int n){
		return n <= branching ? 1 : calc_height(n / branching) + 1;
	}
	static constexpr int calc_offset(int h){
		int s = 0;
		for(auto n = size; h --; n >>= branching_bits) s += ceil(n);
		return s;
	}
	static constexpr int H = calc_height(size);
	template<size_t ... indices> static constexpr array<int, H + 1> calc_offsets(index_sequence<indices...>){ return {calc_offset(indices)...}; }
	static constexpr auto offset = calc_offsets(make_index_sequence<H + 1>());
	int n;
	alignas(cache_size) T data[offset[H]]{};
	F TT; // group operation
	T T_id; // group identity
	I T_inv; // group inverse
	segment_tree_wide_base(int n, F TT, T T_id, I T_inv): TT(TT), T_id(T_id), T_inv(T_inv){
		init(n);
	}
	segment_tree_wide_base(int n, T x, F TT, T T_id, I T_inv): TT(TT), T_id(T_id), T_inv(T_inv){
		init(n, x);
	}
	segment_tree_wide_base(const vector<T> &a, F TT, T T_id, I T_inv): TT(TT), T_id(T_id), T_inv(T_inv){
		init(a);
	}
	void init(int n){
		init(n, T_id);
	}
	void init(int n, T x){
		this->n = n;
		assert(round(n) + branching <= size);
		for(auto i = 0; i < ceil(n); ++ i) data[i] = i < n ? x : T_id;
		_build(n);
	}
	void init(const vector<T> &a){
		n = (int)a.size();
		assert(round(n) + branching <= size);
		for(auto i = 0; i < ceil(n); ++ i) data[i] = i < n ? a[i] : T_id;
		_build(n);
	}
	void _build(int n){
		for(auto h = 1; h < H; ++ h)
			for(auto i = 0; i < ceil(n >> branching_bits * h); ++ i)
				for(auto j = i << branching_bits; j < i + 1 << branching_bits; ++ j)
					data[offset[h] + i] = TT(data[offset[h] + i], data[offset[h - 1] + j]);
		for(auto h = 0; h < H; ++ h){
			T sum;
			for(auto i = 0; i < ceil(n >> branching_bits * h); ++ i){
				if(i % branching == 0) sum = T_id;
				swap(sum, data[offset[h] + i]);
				sum = TT(data[offset[h] + i], sum);
			}
		}
	}
	void update(int p, T _x){
		assert(0 <= p && p < n);
		Twide x = Twide{} + _x;
		for(auto h = 0; h < H; ++ h, p >>= branching_bits){
			auto a = (Twide *)&data[offset[h] + round(p)];
			const auto suffix_mask = (const Twide *)&precalc.mask[p % branching];
			for(auto i = 0; i < reg_count; ++ i) a[i] = TT(a[i], x & suffix_mask[i]);
		}
	}
	T query(int p) const{
		assert(0 <= p && p < n);
		return TT(T_inv(data[p]), (p + 1) % branching ? data[p + 1] : data[offset[1] + (p + 1 >> branching_bits)]);
	}
	void set(int p, T x){
		update(p, TT(T_inv(query(p)), x));
	}
	T prefix(int r) const{
		assert(0 <= r && r <= n);
		if(!r) return T_id;
		T res = T_id;
		for(auto h = 0; h < H; ++ h, r >>= branching_bits) res = TT(res, data[offset[h] + r]);
		return res;
	}
	T query(int l, int r) const{
		assert(0 <= l && l <= r && r <= n);
		if(l == r) return T_id;
		T res = T_id;
		for(auto h = 0; h < H; ++ h, l >>= branching_bits, r >>= branching_bits) res = TT(res, TT(T_inv(data[offset[h] + l]), data[offset[h] + r]));
		return res;
	}
	friend ostream &operator<<(ostream &out, const segment_tree_wide_base<size, T, F, I> &seg){
		out << "[";
		for(auto i = 0; i < seg.n; ++ i){
			out << seg.query(i);
			if(i != seg.n - 1) out << ", ";
		}
		return out << ']';
	}
};

template<class T, class F, class I>
using segment_tree_wide = segment_tree_wide_base<1 << 17, T, F, I>; // 131072
// using segment_tree_wide = segment_tree_wide_base<1 << 18, T, F, I>; // 262144
// using segment_tree_wide = segment_tree_wide_base<1 << 19, T, F, I>; // 524288
// using segment_tree_wide = segment_tree_wide_base<1 << 20, T, F, I>; // 1048576
// using segment_tree_wide = segment_tree_wide_base<1 << 21, T, F, I>; // 2097152
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree_wide</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
