<snippet>
	<content><![CDATA[
// For each 0 <= i < n, add weight[i] to all squares within rectangle[i]
// For each 0 <= qi < qn, res[qi] = sum of values of squares within query[qi]
// Rectangles are given in form [xlow, xhigh] x [ylow, yhigh] where 0 <= xlow <= xhigh <= sigma_x and 0 <= ylow <= yhigh
// Requires lazy_segment_tree
// O((n + sigma_x + qn) * log(n + sigma_x + qn))
template<class B, class T>
vector<T> rectangle_add_rectangle_query_solver_offline(const vector<tuple<int, int, B, B>> &rectangle, const vector<T> &weight, const vector<T> &width, int sigma_x, const vector<tuple<int, int, B, B>> &query){
	int n = (int)rectangle.size(), qn = (int)query.size();
	assert((int)weight.size() == n);
	assert((int)width.size() == sigma_x);
	vector<tuple<B, int, int, int, T, T>> event;
	for(auto i = 0; i < n; ++ i){
		auto [xl, xr, yl, yr] = rectangle[i];
		assert(0 <= xl && xl <= xr && xr <= sigma_x);
		assert(0 <= yl && yl <= yr);
		event.push_back({yl, -1, xl, xr, weight[i] * -yl, weight[i]});
		event.push_back({yr, -1, xl, xr, weight[i] * yr, -weight[i]});
	}
	for(auto qi = 0; qi < qn; ++ qi){
		auto [xl, xr, yl, yr] = query[qi];
		assert(0 <= xl && xl <= xr && xr <= sigma_x);
		assert(0 <= yl && yl <= yr);
		event.push_back({yl, qi << 1, xl, xr, 0, 0});
		event.push_back({yr, qi << 1 | 1, xl, xr, 0, 0});
	}
	sort(event.begin(), event.end());
	vector<array<T, 3>> init(sigma_x);
	for(auto x = 0; x < sigma_x; ++ x) init[x][2] = width[x];
	auto TT = [&](const array<T, 3> &x, const array<T, 3> &y)->array<T, 3>{
		return {x[0] + y[0], x[1] + y[1], x[2] + y[2]};
	};
	auto UU = [&](const array<T, 2> &f, const array<T, 2> &g)->array<T, 2>{
		return {f[0] + g[0], f[1] + g[1]};
	};
	auto U_init = [&](int, int)->array<T, 2>{
		return {};
	};
	auto UT = [&](const array<T, 2> &f, const array<T, 3> &x)->array<T, 3>{
		return {x[0] + f[0] * x[2], x[1] + f[1] * x[2], x[2]};
	};
	lazy_segment_tree seg(init, TT, array<T, 3>{}, UU, U_init, UT, array<T, 2>{});
	vector<T> res(qn);
	for(auto [y, t, xl, xr, c0, c1]: event){
		if(!~t) seg.update(xl, xr, {c0, c1});
		else{
			auto q = seg.query(xl, xr);
			res[t >> 1] += (t & 1 ? 1 : -1) * (q[0] + q[1] * y);
		}
	}
	return res;
}
vector<long long> rectangle_add_rectangle_query_solver_offline(const vector<tuple<int, int, int, int>> &rectangle, int sigma_x, const vector<tuple<int, int, int, int>> &query){
	return rectangle_add_rectangle_query_solver_offline<int, long long>(rectangle, vector<long long>((int)rectangle.size(), 1), vector<long long>(sigma_x, 1), sigma_x, query);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>rectangle_add_rectangle_query_solver_offline</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
