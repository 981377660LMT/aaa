<snippet>
	<content><![CDATA[
// Requires fenwick_tree
template<int TYPE, class T, class Compare = less<>>
struct relative_query_solver_offline{ // TYPE: {0: distinct value query, 1: comparison query}
	int n;
	Compare cmp;
	vector<T> cmpr;
	vector<array<int, 2>> event;
	vector<array<int, 4>> queries;
	relative_query_solver_offline(){ }
	relative_query_solver_offline(const vector<T> &a, Compare cmp = less<>()): n((int)a.size()), event(n), cmp(cmp){
		if(!TYPE){
			map<T, int, Compare> q(cmp);
			for(auto i = 0; i < n; ++ i){
				event[i] = {(q.count(a[i]) ? q[a[i]] : -1), i};
				q[a[i]] = i;
			}
		}
		else{
			cmpr = a;
			sort(cmpr.begin(), cmpr.end(), cmp), cmpr.erase(unique(cmpr.begin(), cmpr.end()), cmpr.end());
			for(auto i = 0; i < n; ++ i) event[i] = {std::lower_bound(cmpr.begin(), cmpr.end(), a[i], cmp) - cmpr.begin(), i};
		}
	}
	// Rescalling function for less-than-k query
	int lower_bound(T k){ // exclusive
		return std::lower_bound(cmpr.begin(), cmpr.end(), k, cmp) - cmpr.begin();
	}
	int upper_bound(T k){ // inclusive
		return std::upper_bound(cmpr.begin(), cmpr.end(), k, cmp) - cmpr.begin();
	}
	void count_distinct(int qi, int ql, int qr){
		assert(!TYPE), queries.push_back({ql, ql, qr, qi});
	}
	void count_less(int qi, int ql, int qr, T k){
		assert(TYPE), queries.push_back({lower_bound(k), ql, qr, qi});
	}
	void count_equal_or_less(int qi, int ql, int qr, T k){
		assert(TYPE), queries.push_back({upper_bound(k), ql, qr, qi});
	}
	void solve(auto f){ // f(index, answer)
		sort(queries.begin(), queries.end()), sort(event.begin(), event.end(), greater<>());
		fenwick_tree<int> tr(n);
		for(auto &q: queries){
			while(!event.empty() && event.back()[0] < q[0]) tr.update(event.back()[1], 1), event.pop_back();
			f(q[3], tr.query(q[1], q[2]));
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>relative_query_solver_offline</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
