<snippet>
	<content><![CDATA[
template<class T>
struct static_sparse_rectangle_query_processor_offline{
	int sigma_x;
	vector<int> lower_bound_x;
	value_range_query_solver_offline<T> vrq;
	// O(sigma_x + n * log(n))
	static_sparse_rectangle_query_processor_offline(const vector<array<int, 2>> points, int sigma_x): vrq({}, 0){
		int n = (int)points.size();
		vector<tuple<int, int, T>> points2(n);
		for(auto i = 0; i < n; ++ i){
			auto &[x, y, w] = points2;
			x = points[i][0];
			y = points[i][1];
			w = 1;
		}
		*this = static_sparse_rectangle_query_processor_offline(points2, sigma_x);
	}
	// O(sigma_x + n * log(n))
	static_sparse_rectangle_query_processor_offline(vector<tuple<int, int, T>> points, int sigma_x): sigma_x(sigma_x), lower_bound_x(sigma_x + 1), vrq({}, 0){
		for(auto [x, y, w]: points) assert(0 <= x && x < sigma_x);
		sort(points.begin(), points.end());
		int n = (int)points.size();
		for(auto x = 0, i = 0; x <= sigma_x; ++ x){
			while(i < n && get<0>(points[i]) < x) ++ i;
			lower_bound_x[x] = i;
		}
		vector<int> Y(n);
		vector<T> w(n);
		for(auto i = 0; i < n; ++ i){
			Y[i] = get<1>(points[i]);
			w[i] = get<2>(points[i]);
		}
		vrq = {Y, w};
	}
	static_sparse_rectangle_query_processor_offline &operator=(const static_sparse_rectangle_query_processor_offline &rqp){
		sigma_x = rqp.sigma_x;
		lower_bound_x = rqp.lower_bound_x;
		vrq = rqp.vrq;
		return *this;
	}
	void query(int qi, int xl, int xr, int y){
		assert(0 <= xl && xl <= xr && xr <= sigma_x);
		vrq.query(qi, lower_bound_x[xl], lower_bound_x[xr], y);
	}
	// init(n) Initialize DS over identity array A of length n
	// set(p, x): A[p] <- x, A[p] is always identity beforehand
	// query(l, r): return sum in A[l:r)
	// answer(qi, x): answer to query qi is sum of weights of points in
	//  [xl, xr) x [-INF, y)
	// O(init() + n * (log(n) + update()) + q * (log(q) + query() + answer()))
	// Requires value_range_query_solver_offline
	void solve_less(auto init, auto set, auto query, auto answer){
		vrq.solve_less(init, set, query, answer);
	}
	// init(n) Initialize DS over identity array A of length n
	// set(p, x): A[p] <- x, A[p] is always identity beforehand
	// query(l, r): return sum in A[l:r)
	// answer(qi, x): answer to query qi is sum of weights of points in
	//  [xl, xr) x [y, INF)
	// O(init() + n * (log(n) + update()) + q * (log(q) + query() + answer()))
	// Requires value_range_query_solver_offline
	void solve_equal_or_greater(auto init, auto set, auto query, auto answer){
		vrq.solve_equal_or_greater(init, set, query, answer);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>static_sparse_rectangle_query_processor_offline</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
