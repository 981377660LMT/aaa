<snippet>
	<content><![CDATA[
// Partition the sorted elements according to capacity, and track the sum of each blocks.
template<class T, class U, class Compare = less<>, class Plus = plus<>, class Minus = minus<>>
struct sorted_range_sum_tracker{
	int B;
	Plus op;
	Minus inv_op;
	vector<U> sum;
	vector<multiset<T, Compare>> data;
	vector<int> capacity;
	sorted_range_sum_tracker(int B = 2, U init = {}, Compare cmp = less<>(), Plus op = plus<>(), Minus inv_op = minus<>()): B(B), sum(B, init), data(B, multiset<T, Compare>{cmp}), capacity(B - 1), op(op), inv_op(inv_op){
		assert(B >= 2);
	}
	// O(B * log(n))
	void insert(T x){
		sum[0] = op(sum[0], x);
		data[0].insert(x);
		for(auto i = 0; i < B - 1 && (int)data[i].size() > capacity[i]; ++ i){
			sum[i + 1] = op(sum[i + 1], *data[i].rbegin());
			data[i + 1].insert(data[i + 1].begin(), *data[i].rbegin());
			sum[i] = inv_op(sum[i], *data[i].rbegin());
			data[i].erase(prev(data[i].end()));
		}
	}
	// O(B * log(n))
	void erase(T x){
		int i = 0;
		while(i < B && data[i].find(x) == data[i].end()) ++ i;
		assert(i < B);
		data[i].erase(data[i].find(x));
		sum[i] = inv_op(sum[i], x);
		for(; i < B - 1 && (int)data[i].size() < capacity[i] && !data[i + 1].empty(); ++ i){
			sum[i] = op(sum[i], *data[i + 1].begin());
			data[i].insert(data[i].end(), *data[i + 1].begin());
			sum[i + 1] = inv_op(sum[i + 1], *data[i + 1].begin());
			data[i + 1].erase(data[i + 1].begin());
		}
	}
	// Set the capacity of the b-th block to c
	// O(abs(capacity[b] - c) * B * log(n))
	void set_capacity(int c, int b = 0){
		assert(0 <= b && b < B - 1 && c >= 0);
		capacity[b] = c;
		while((int)data[b].size() < capacity[b] && !data[b + 1].empty()){
			for(auto i = b; i < B - 1 && (int)data[i].size() < capacity[i] && !data[i + 1].empty(); ++ i){
				sum[i] = op(sum[i], *data[i + 1].begin());
				data[i].insert(data[i].end(), *data[i + 1].begin());
				sum[i + 1] = inv_op(sum[i + 1], *data[i + 1].begin());
				data[i + 1].erase(data[i + 1].begin());
			}
		}
		while((int)data[b].size() > capacity[b]){
			for(auto i = b; i < B - 1 && (int)data[i].size() > capacity[i]; ++ i){
				sum[i + 1] = op(sum[i + 1], *data[i].rbegin());
				data[i + 1].insert(data[i + 1].begin(), *data[i].rbegin());
				sum[i] = inv_op(sum[i], *data[i].rbegin());
				data[i].erase(prev(data[i].end()));
			}
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sorted_range_sum_tracker</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
