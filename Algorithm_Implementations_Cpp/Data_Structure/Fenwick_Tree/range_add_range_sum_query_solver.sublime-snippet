<snippet>
	<content><![CDATA[
template<class T>
struct range_add_range_sum_query_solver{
	int n;
	vector<T> data0, data1;
	range_add_range_sum_query_solver(){ }
	// O(n)
	range_add_range_sum_query_solver(int n): n(n), data0(n + 1), data1(n + 1){ }
	// O(n)
	range_add_range_sum_query_solver(int n, T init): range_add_range_sum_query_solver(vector<T>(n, init)){ }
	// O(n)
	range_add_range_sum_query_solver(const vector<T> &v): n((int)v.size()), data0(v), data1(n){
		for(auto i = 1; i <= n; ++ i) if(i + (i & -i) <= n) data0[i + (i & -i) - 1] += data0[i - 1];
	}
	void update(int l, int r, T x){
		assert(0 <= l && l <= r && r <= n);
		if(l == r) return;
		for(++ l; l <= n; l += l & -l) data0[l - 1] += x, data1[l - 1] -= l * x;
		if(r < n) for(++ r; r <= n; r += r & -r) data0[r - 1] -= x, data1[r - 1] += r * x;
	}
	T pref(int r) const{
		assert(0 <= r && r <= n);
		T sum0 = {}, sum1 = {};
		for(; r > 0; r -= r & -r) sum0 += data0[r - 1], sum1 += data1[r - 1];
		return sum0 * r + sum1;
	}
	T query(int l, int r) const{
		assert(0 <= l && l <= r && r <= n);
		return pref(r) - pref(l);
	}
	template<class output_stream>
	friend output_stream &operator<<(output_stream &out, const range_add_range_sum_query_solver<T> &solver){
		out << "[";
		for(auto i = 0; i < solver.n; ++ i){
			out << solver.query(i, i + 1);
			if(i != solver.n - 1) out << ", ";
		}
		return out << ']';
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>range_add_range_sum_query_solver</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
