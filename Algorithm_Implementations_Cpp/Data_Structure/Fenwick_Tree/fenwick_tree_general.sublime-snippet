<snippet>
	<content><![CDATA[
template<class T>
struct fenwick_tree_general{
	int n;
	vector<T> data;
	function<T(T, T)> TT;
	T T_id;
	fenwick_tree_general(){ }
	fenwick_tree_general(int n, function<T(T, T)> TT, T T_id): n(n), data(n, T_id), TT(TT), T_id(T_id){ }
	fenwick_tree_general(int n, T init, function<T(T, T)> TT, T T_id): fenwick_tree_general(vector<T>(n, init), TT, T_id){ }
	fenwick_tree_general(const vector<T> &v, function<T(T, T)> TT, T T_id): n((int)v.size()), data(v), TT(TT), T_id(T_id){
		for(auto i = 1; i <= n; ++ i) if(i + (i & -i) <= n) data[i + (i & -i) - 1] = TT(data[i + (i & -i) - 1], data[i - 1]);
	}
	void update(int p, T x){
		assert(0 <= p && p < n);
		for(++ p; p <= n; p += p & -p) data[p - 1] = TT(data[p - 1], x);
	}
	T query(int r){
		T s = T_id;
		for(; r > 0; r -= r & -r) s = TT(s, data[r - 1]);
		return s;
	}
	T query(int l, int r, function<T(T, T)> TinvT){
		assert(0 <= l && l <= r && r <= n);
		return TinvT(query(r), query(l));
	}
	template<class F> int max_pref(F f){
		int p = 0;
		T pref = T_id;
		for(auto i = __lg(n + 1); i >= 0; -- i) if(p + (1 << i) <= n && f(TT(pref, data[p + (1 << i) - 1]))){
			pref = TT(pref, data[p + (1 << i) - 1]);
			p += 1 << i;
		}
		return p;
	} // f(sum[0, r)) is T, T, ..., T, F, F, ..., F, returns max r with T
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fenwick_tree_general</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
