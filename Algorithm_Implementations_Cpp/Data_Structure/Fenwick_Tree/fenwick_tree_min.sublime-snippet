<snippet>
	<content><![CDATA[
template<class T>
struct fenwick_tree_min{
	int n;
	vector<T> data;
	T T_id;
	fenwick_tree_min(int n, T init, T_id = numeric_limits<T>::max()): fenwick_tree_min(vector<T>(n, init), T_id){ }
	fenwick_tree_min(const vector<T> &v, T_id = numeric_limits<T>::max()): n((int)v.size()), data(v), T_id(T_id){
		for(auto i = 1; i <= n; ++ i) if(i + (i & -i) <= n) data[i + (i & -i) - 1] = min(data[i + (i & -i) - 1], data[i - 1]);
	}
	// O(log n)
	void update(int p, T x){
		assert(0 <= p && p < n);
		for(++ p; p <= n; p += p & -p) data[p - 1] = min(data[p - 1], x);
	}
	// O(log n)
	T pref(int r) const{
		T s = T_id;
		for(; r > 0; r -= r & -r) s = min(s, data[r - 1]);
		return s;
	}
	// pred(sum[0, r)) is T, T, ..., T, F, F, ..., F, returns max r with T
	// O(log n)
	int max_pref(auto pred) const{
		assert(pred(T_id));
		int p = 0;
		T pref = T_id;
		for(auto i = __lg(n + 1); i >= 0; -- i) if(p + (1 << i) <= n && pred(min(pref, data[p + (1 << i) - 1]))){
			pref = min(pref, data[p + (1 << i) - 1]);
			p += 1 << i;
		}
		return p;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fenwick_tree_min</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
