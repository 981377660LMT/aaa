<snippet>
	<content><![CDATA[
// Very slow, use SPFA version instead
// Requires weighted_flow_network
template<class T, class C>
struct cycle_cancelling_minimum_cost_maximum_flow{
	static constexpr T eps = (T)1e-9, inf = numeric_limits<T>::max();
	weighted_flow_network<T, C> &F;
	cycle_cancelling_minimum_cost_maximum_flow(weighted_flow_network<T, C> &F): F(F), ptr(F.n), level(F.n), q(F.n), d(F.n), pe(F.n){ }
	vector<int> ptr, level, q;
	bool bfs(int source, int sink){
		fill(level.begin(), level.end(), -1);
		q[0] = sink;
		level[sink] = 0;
		int beg = 0, end = 1;
		while(beg < end){
			int i = q[beg ++];
			for(auto ind: F.adj[i]){
				auto &e = F.edges[ind];
				auto &re = F.edges[ind ^ 1];
				if(re.capacity - re.flow > eps && level[e.to] == -1){
					level[e.to] = level[i] + 1;
					if(e.to == source) return true;
					q[end ++] = e.to;
				}
			}
		}
		return false;
	}
	T dfs(int u, T w, int sink){
		if(u == sink) return w;
		int &j = ptr[u];
		while(j >= 0){
			int ind = F.adj[u][j];
			auto &e = F.edges[ind];
			if(e.capacity - e.flow > eps && level[e.to] == level[u] - 1){
				T flow = dfs(e.to, min(e.capacity - e.flow, w), sink);
				if(flow > eps){
					F.add_flow(ind, flow);
					return flow;
				}
			}
			-- j;
		}
		return 0;
	}
	// Find a maximum source-sink flow
	// O(V^2 E) ( O(E min(V^2/3, E^1/2)) for unit network )
	T maximum_flow(int source, int sink){
		while(bfs(source, sink)){
			for(auto i = 0; i < F.n; ++ i) ptr[i] = (int)F.adj[i].size() - 1;
			T sum = 0;
			while(true){
				T add = dfs(source, inf, sink);
				if(add <= eps) break;
				sum += add;
			}
			if(sum <= eps) break;
			F.flow += sum;
		}
		return F.flow;
	}
	// Find a minimum source-sink cut
	// res[u] = [0 if u belongs to source-side, otherwise 1]
	// O(V^2 E) ( O(E min(V^2/3, E^1/2)) for unit network )
	pair<T, vector<bool>> minimum_cut(int source, int sink){
		T cut = maximum_flow(source, sink);
		vector<bool> res(F.n);
		for(auto i = 0; i < F.n; ++ i) res[i] = !!~level[i];
		return {cut, res};
	}
	vector<C> d;
	vector<int> pe;
	// Returns a point in a negative cycle, -1 if no such cycle.
	// O(VE)
	void augment_with_negative_cycles(){
		while(true){
			fill(d.begin(), d.end(), 0);
			int x;
			for(auto rep = 0; rep < F.n; ++ rep){
				x = -1;
				for(auto id = 0; id < (int)F.edges.size(); ++ id){
					auto [u, v, cap, flow, cost] = F.edges[id];
					if(cap - flow > eps && d[u] + cost < d[v]) d[v] = d[u] + cost, pe[v] = id, x = v;
				}
			}
			if(!~x) break;
			for(auto rep = 0; rep < F.n; ++ rep) x = F.edges[pe[x]].from;
			vector<int> cycle;
			for(auto u = x; u != x || cycle.empty(); u = F.edges[pe[u]].from) cycle.push_back(pe[u]);
			reverse(cycle.begin(), cycle.end());
			T push = numeric_limits<T>::max();
			for(auto id: cycle){
				auto &e = F.edges[id];
				push = min(push, e.capacity - e.flow);
				x = e.to;
			}
			for(auto id: cycle){
				F.add_flow(id, push);
				x = F.edges[id].to;
			}
		}
	}
	pair<T, C> minimum_cost_maximum_flow(int source, int sink){
		maximum_flow(source, sink);
		augment_with_negative_cycles();
		return {F.flow, F.cost};
	}
	pair<T, C> minimum_cost_flow(int source, int sink, int upper = numeric_limits<int>::max()){
		pair<C, T> res{numeric_limits<C>::max(), numeric_limits<T>::max()};
		augment_with_negative_cycles();
		res = min(res, pair{F.cost, F.flow});
		while(bfs(source, sink)){
			for(auto i = 0; i < F.n; ++ i) ptr[i] = (int)F.adj[i].size() - 1;
			T sum = 0;
			while(true){
				if(!dfs(source, 1, sink)) break;
				++ sum, ++ F.flow;
				augment_with_negative_cycles();
				res = min(res, pair{F.cost, F.flow});
				if(F.flow == upper) break;
			}
			if(sum <= eps || F.flow == upper) break;
		}
		return {res.second, res.first};
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cycle_cancelling_minimum_cost_maximum_flow</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
