<snippet>
	<content><![CDATA[
// Returns a tree T where for all s!=t, min s-t cut of g equals
// min_{e is in s-t path in T}( (capacity of S_e-T_e cut in G) = (capacity of s-t edge in T) ) 
// n - 1 dinic_maximum_flow.minimum_cut() calls
// Requires flow_network and dinic_maximum_flow
template<class T>
vector<tuple<int, int, T>> gomory_hu_tree(int n, const vector<tuple<int, int, T>> &edge){
	flow_network<T> F(n);
	for(auto &[u, v, w]: edge) F.insert(u, v, w, w);
	vector<tuple<int, int, T>> res(n - 1);
	vector<int> pr(n);
	for(auto i = 1; i < n; ++ i){
		F.clear_flow();
		auto [flow, cut] = dinic_maximum_flow<T>(F).minimum_cut(pr[i], i);
		for(auto j = i + 1; j < n; ++ j) if(cut[j] == cut[i] && pr[j] == pr[i]) pr[j] = i;
		res[i - 1] = {pr[i], i, flow};
	} // can be optimized by compressing components
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>gomory_hu</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
