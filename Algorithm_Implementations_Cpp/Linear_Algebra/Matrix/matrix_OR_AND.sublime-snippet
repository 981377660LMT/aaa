<snippet>
	<content><![CDATA[
template<size_t SZ>
struct matrix_OR_AND_base{
	using ring_t = bool;
	using domain_t = bitset<SZ>;
	using range_t = bitset<SZ>;
	static bool get_zero(){
		return false;
	}
	static bool get_one(){
		return true;
	}
	int n, m;
	vector<bitset<SZ>> data;
	bitset<SZ> &operator()(int i){
		assert(0 <= i && i < n);
		return data[i];
	}
	const bitset<SZ> &operator()(int i) const{
		assert(0 <= i && i < n);
		return data[i];
	}
	bitset<SZ>::reference operator()(int i, int j){
		assert(0 <= i && i < n && 0 <= j && j < m);
		return data[i][j];
	}
	bool operator()(int i, int j) const{
		assert(0 <= i && i < n && 0 <= j && j < m);
		return data[i][j];
	}
	bool operator==(const matrix_OR_AND_base &a) const{
		assert(n == a.n && m == a.m);
		return data == a.data;
	}
	bool operator!=(const matrix_OR_AND_base &a) const{
		assert(n == a.n && m == a.m);
		return data != a.data;
	}
	matrix_OR_AND_base &operator+=(const matrix_OR_AND_base &a){
		assert(n == a.n && m == a.m);
		for(auto i = 0; i < n; ++ i) data[i] |= a[i];
		return *this;
	}
	matrix_OR_AND_base operator+(const matrix_OR_AND_base &a) const{
		matrix_OR_AND_base res(n, m);
		return res += a;;
	}
	matrix_OR_AND_base operator*(const matrix_OR_AND_base &a) const{
		assert(m == a.n);
		int l = a.m;
		matrix_OR_AND_base res(n, l);
		vector<bitset<SZ>> temp(l);
		for(auto i = 0; i < l; ++ i) for(auto j = 0; j < m; ++ j) temp[i][j] = a[j][i];
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < l; ++ j) res[i][j] = (data[i] & temp[j]).any();
		return res;
	}
	matrix_OR_AND_base &operator*=(const matrix_OR_AND_base &a){
		return *this = *this * a;
	}
	matrix_OR_AND_base &operator*=(bool c){
		if(!c) for(auto &v: *this) v.reset();
		return *this;
	}
	matrix_OR_AND_base operator*(bool c) const{
		matrix_OR_AND_base res(data, n, m);
		return res *= c;
	}
	template<class T, typename enable_if<is_integral<T>::value>::type* = nullptr>
	matrix_OR_AND_base &inplace_power(T e){
		assert(n == m);
		matrix_OR_AND_base res(n, n, true);
		for(; e; *this *= *this, e >>= 1) if(e & 1) res *= *this;
		return *this = res;
	}
	template<class T>
	matrix_OR_AND_base power(T e) const{
		return matrix_OR_AND_base(*this).inplace_power(e);
	}
	matrix_OR_AND_base transposed() const{
		matrix_OR_AND_base res(m, n);
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) res[j][i] = data[i][j];
		return res;
	}
	matrix_OR_AND_base &transpose(){
		return *this = transposed();
	}
	// Multiply a column vector v on the right
	range_t operator*(const domain_t &v) const{
		vector<int> res(n);
		for(auto i = 0; i < n; ++ i) res[i] = (data[i] & v).any();
		return res;
	}
	template<class output_stream>
	friend output_stream &operator<<(output_stream &out, const matrix_OR_AND_base &a){
		out << "\n";
		for(auto i = 0; i < a.n; ++ i){
			for(auto j = 0; j < a.m; ++ j){
				out << bool(a[i][j]);
			}
			out << "\n";
		}
		return out;
	}
	matrix_OR_AND_base(int n, int m, bool init_diagonal = false, bool init_off_diagonal = false): n(n), m(m), data(n){
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) data[i][j] = i == j ? init_diagonal : init_off_diagonal;
	}
	matrix_OR_AND_base(const vector<bitset<SZ>> &arr, int _n = -1, int _m = -1): n(~n ? _n : (int)arr.size()), m(~_m ? _m : SZ), data(arr){ }
};
template<size_t SZ>
matrix_OR_AND_base<SZ> operator*(bool c, matrix_OR_AND_base<SZ> a){
	if(!c) for(auto &v: a) v.reset();
	return a;
}
// Multiply a row vector v on the left
template<size_t SZ>
matrix_OR_AND_base<SZ>::domain_t operator*(const typename matrix_OR_AND_base<SZ>::range_t &v, const matrix_OR_AND_base<SZ> &a){
	assert(a.n == (int)v.size());
	typename matrix_OR_AND_base<SZ>::domain_t res;
	for(auto i = 0; i < a.n; ++ i) if(v[i]) res |= a[i];
	return res;
}

using matrix_OR_AND = matrix_OR_AND_base<1000>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrix_OR_AND</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
