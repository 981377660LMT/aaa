<snippet>
	<content><![CDATA[
// s: size of seed tree
// Requires random
pair<int, vector<array<int, 2>>> generate_cactus(int s, int cycle_size_bound = 4, double edge_to_cycle_p = 0, double vertex_to_cycle_p = 0.2){
	vector<vector<int>> bag(s);
	int n = 0;
	vector<array<int, 2>> res;
	for(auto i = 0; i < s; ++ i){
		if(pick(1, 0, vertex_to_cycle_p)){
			int size = rng() % (cycle_size_bound - 2) + 3;
			bag[i].resize(size);
			iota(bag[i].begin(), bag[i].end(), n);
			n += size;
			for(auto j = 0; j < size; ++ j) res.push_back({bag[i][j], bag[i][(j + 1) % size]});
		}
		else bag[i].push_back(n ++);
	}
	for(auto i = 1; i < s; ++ i){
		int pi = rng() % i;
		if(pick(1, 0, edge_to_cycle_p)){
			int size = rng() % (cycle_size_bound - 2) + 3;
			vector<int> cycle(size);
			cycle[0] = bag[pi][rng() % (int)bag[pi].size()];
			cycle[1] = bag[i][rng() % (int)bag[i].size()];
			iota(cycle.begin() + 2, cycle.end(), n);
			n += size - 2;
			shuffle(cycle.begin(), cycle.end(), rng);
			for(auto j = 0; j < size; ++ j) res.push_back({cycle[j], cycle[(j + 1) % size]});
		}
		else res.push_back({bag[pi][rng() % (int)bag[pi].size()], bag[i][rng() % (int)bag[i].size()]});
	}
	return {n, res};
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>generate_cactus</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
