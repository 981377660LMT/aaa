<snippet>
	<content><![CDATA[
// O(V + E sqrt(E)) for graphs without loops or multiedges
void find_4_cycles(int n, const vector<array<int, 2>> &edge, auto process, int th = 1){
	vector<int> deg(n), order(n), pos(n);
	for(auto [u, v]: edge) ++ deg[u], ++ deg[v];
	iota(order.begin(), order.end(), 0);
	sort(order.begin(), order.end(), [&](int u, int v){ return deg[u] > deg[v]; });
	for(auto i = 0; i < n; ++ i) pos[order[i]] = i;
	vector<vector<int>> adj(n);
	for(auto i = 0; i < (int)edge.size(); ++ i){
		int u = pos[edge[i][0]], v = pos[edge[i][1]];
		adj[u].push_back(v), adj[v].push_back(u);
	}
	vector<vector<int>> found(n);
	for(auto u = 0; u < n; ++ u){
		for(auto v: adj[u]) if(u < v) for(auto w: adj[v]) if(u < w) found[w].clear();
		for(auto v: adj[u]) if(u < v) for(auto w: adj[v]) if(u < w){
			for(auto x: found[w]){
				if(!(th --)) return;
				process(order[u], order[v], order[w], order[x]);
			}
			found[w].push_back(v);
		}
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>find_4_cycles</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
