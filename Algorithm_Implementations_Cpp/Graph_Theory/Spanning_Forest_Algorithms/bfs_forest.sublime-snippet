<snippet>
	<content><![CDATA[
// Requires graph
template<class T>
struct bfs_forest{
	int n;
	T base_dist;
	vector<T> dist;
	vector<int> pv;
	vector<int> pe;
	vector<int> order;
	vector<int> pos;
	vector<int> root_of;
	vector<int> root;
	vector<int> depth;
	vector<int> was;
	bfs_forest(T base_dist = 0): base_dist(base_dist){ }
	void init(int n){
		this->n = n;
		pv.assign(n, -1);
		pe.assign(n, -1);
		order.clear();
		pos.assign(n, -1);
		root_of.assign(n, -1);
		root.clear();
		depth.assign(n, -1);
		dist.assign(n, base_dist);
		was.assign(n, -2);
		attempt = -1;
	}
	int attempt;
	vector<int> q;
	// O(n + m)
	template<class F = plus<>>
	void _bfs(const graph<T> &g, const vector<int> &src, F UT = plus<>()){
		assert(g.n <= n);
		q = src;
		for(auto u: src){
			was[u] = attempt;
			depth[u] = 0;
			dist[u] = base_dist;
			root_of[u] = u;
			root.push_back(u);
			pv[u] = -1;
			pe[u] = -1;
		}
		for(auto it = 0; it < (int)q.size(); ++ it){
			int u = q[it];
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				if(was[v] == attempt) continue;
				was[v] = attempt;
				depth[v] = depth[u] + 1;
				dist[v] = UT(e.cost, dist[u]);
				pv[v] = u;
				pe[v] = id;
				root_of[v] = root_of[u];
				q.push_back(v);
			}
		}
		q.clear();
	}
	// O(n + m)
	template<class F = plus<>>
	void bfs(const graph<T> &g, const vector<int> &src, F UT = plus<>()){
		assert(g.n <= n);
		root.clear(), order.clear();
		for(auto u: src) assert(0 <= u && u < g.n);
		++ attempt;
		_bfs(g, src, UT);
	}
	// O(n + m)
	template<class F = plus<>>
	void bfs_all(const graph<T> &g, F UT = plus<>()){
		assert(g.n <= n);
		root.clear(), order.clear();
		vector<int> src(g.n);
		iota(src.begin(), src.end(), 0);
		++ attempt;
		_bfs(g, src, UT);
	}
	// Check if u is visited during the last dfs-like call.
	bool visited(int u) const{
		assert(0 <= u && u < n);
		return was[u] == attempt;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bfs_forest</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
