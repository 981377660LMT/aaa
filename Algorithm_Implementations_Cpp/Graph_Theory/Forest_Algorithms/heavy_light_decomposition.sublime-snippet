<snippet>
	<content><![CDATA[
// Requires graph
template<int VALS_IN_EDGES = 0>
struct heavy_light_decomposition{
	int n;
	vector<vector<int>> adj; // stores edge ids
	vector<int> roots; // root of the component
	vector<int> pv;
	vector<int> pe;
	vector<int> sz;
	vector<int> depth;
	vector<int> next; // highest point of the heavy path
	vector<int> prev; // lowest point of the heavy path
	vector<int> pos;
	vector<int> end;
	vector<int> order;
	template<class T>
	heavy_light_decomposition(const graph<T> &g, const vector<int> &roots): n(g.n), roots(roots), adj(n), pv(n, -1), pe(n, -1), sz(n, 1), depth(n), next(n), prev(n), pos(n), end(n){
		iota(prev.begin(), prev.end(), 0);
		for(auto id = 0; id < (int)g.edges.size(); ++ id){
			if(g.ignore && g.ignore(id)) continue;
			auto &e = g.edges[id];
			adj[e.from].push_back(id), adj[e.to].push_back(id);
		}
		auto dfs_init = [&](auto self, int u, int root)->void{
			next[u] = root;
			if(~pe[u]) adj[u].erase(find(adj[u].begin(), adj[u].end(), pe[u]));
			for(auto &id: adj[u]){
				auto &e = g.edges[id];
				int v = u ^ e.from ^ e.to;
				pv[v] = u, pe[v] = id, depth[v] = depth[u] + 1;
				self(self, v, u);
				sz[u] += sz[v];
				auto &f = g.edges[adj[u][0]];
				if(sz[v] > sz[u ^ f.from ^ f.to]) swap(id, adj[u][0]);
			}
			if(!adj[u].empty()){
				auto &e = g.edges[adj[u][0]];
				prev[u] = prev[u ^ e.from ^ e.to];
			}
		};
		int timer = 0;
		auto dfs_hld = [&](auto self, int u)->void{
			pos[u] = timer ++;
			order.push_back(u);
			if(!adj[u].empty()){
				auto &f = g.edges[adj[u][0]];
				int hv = u ^ f.from ^ f.to;
				for(auto id: adj[u]){
					auto &e = g.edges[id];
					int v = u ^ e.from ^ e.to;
					next[v] = (v == hv ? next[u] : v);
					self(self, v);
				}
			}
			end[u] = timer;
		};
		for(auto r: roots) assert(!~pv[r]), dfs_init(dfs_init, r, r), dfs_hld(dfs_hld, r);
	}
	int lca(int u, int v) const{
		for(; next[u] != next[v]; v = pv[next[v]]) if(depth[next[u]] > depth[next[v]]) swap(u, v);
		return depth[u] < depth[v] ? u : v;
	}
	int steps(int u, int v, int w = -1) const{
		return depth[u] + depth[v] - 2 * depth[~w ? w : lca(u, v)];
	}
	// f reads the position in the data structure
	// One application of f
	void querynode(int u, auto f) const{
		f(pos[u]);
	}
	// One application of f
	void querysubtree(int u, auto f) const{
		f(pos[u] + VALS_IN_EDGES, end[u]);
	}
	// f(left, right, (left->right ?))
	// O(log n) applications of f
	void querypath(int u, int v, auto f) const{
		bool dir = true;
		for(; next[u] != next[v]; v = pv[next[v]]){
			if(depth[next[u]] > depth[next[v]]) swap(u, v), dir = !dir;
			f(pos[next[v]], pos[v] + 1, dir);
		}
		if(depth[u] > depth[v]) swap(u, v), dir = !dir;
		f(pos[u] + VALS_IN_EDGES, pos[v] + 1, dir);
	}
	// Pair of indices {l, r} in the data structure. resr is reversed(v->next[v], pv[next[v]]-> ...)
	// O(log n)
	auto getpath(int u, int v) const{
		vector<pair<int, int>> resl, resr;
		querypath(u, v, [&](int l, int r, bool dir){ (dir ? resl : resr).push_back({l, r}); });
		return pair{resl, resr};
	}
	vector<int> partition, weights;
	template<class T>
	void process_weight(const graph<T> &g){
		weights.assign(n, 1);
		vector<bool> is_head(n, true);
		for(auto u = 0; u < n; ++ u){
			if(g.degree(u)){
				auto &e = g.edges[adj[u][0]];
				int v = u ^ e.from ^ e.to;
				is_head[pos[v]] = false;
				weights[pos[u]] = sz[u] - sz[v];
			}
		}
		for(auto l = 0; l < n; ){
			int r = find(is_head.begin() + l + 1, is_head.end(), true) - is_head.begin();
			partition.push_back(r - l);
			l = r;
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>heavy_light_decomposition</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
