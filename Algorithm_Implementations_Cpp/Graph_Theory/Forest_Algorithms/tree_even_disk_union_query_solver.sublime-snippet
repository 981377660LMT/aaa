<snippet>
	<content><![CDATA[
// Requires graph, range_minmax_query_solver, lca_solver, compressed_tree, binary_lifting, (shallowest_decomposition or centroid_decomposition), and tree_disk_query_solver
template<class T, class LS, class BL, class DQS, class F = plus<>, class I = minus<>>
struct tree_even_disk_union_query_solver{
	int n;
	const LS &ls;
	const BL &bl;
	const DQS &dqs;
	F TT; // Commutative group operation
	T T_id; // Commutative group identity
	I TinvT; // Commutative group inverse operation
	tree_even_disk_union_query_solver(T, const LS &ls, const BL &bl, const DQS &dqs, F TT = plus<>(), T T_id = {}, I TinvT = minus<>()): n(ls.n), ls(ls), bl(bl), dqs(dqs), TT(TT), T_id(T_id), TinvT(TinvT), cadj(n), optimal(n, -1), optimal_ind(n, -1), done(n){ }
	vector<vector<array<int, 2>>> cadj;
	vector<int> optimal, optimal_ind, done;
	// Find the sum of value over all vertices v which lies within at least one closed disk
	// Radius must be even
	// Distance between each centers must be even
	// O(k * (log n + log k))
	T query(const vector<int> &center, const vector<int> &radius){
		assert(center.size() == radius.size());
		if(center.empty()) return T_id;
		auto edges = compressed_tree(ls, center);
		for(auto [u, v]: edges){
			int d = ls.steps(u, v);
			assert(~d & 1);
			cadj[u].push_back({v, d});
			cadj[v].push_back({u, d});
		}
		int k = (int)center.size();
		assert(all_of(center.begin(), center.end(), [&](int u){
			return 0 <= u && u < n && ~ls.steps(center[0], u) & 1;
		}) && all_of(radius.begin(), radius.end(), [&](int r){ return r >= 0 && ~r & 1; }));
		priority_queue<array<int, 2>> pq;
		T res = T_id;
		for(auto i = 0; i < k; ++ i){
			int u = center[i], r = radius[i];
			if(optimal[u] < r){
				res = TT(res, dqs.query_closed_disk(u, r));
				if(~optimal_ind[u]){
					res = TinvT(res, dqs.query_closed_disk(u, radius[optimal_ind[u]]));
				}
				pq.push({optimal[u] = r, u});
				optimal_ind[u] = i;
			}
		}
		while(!pq.empty()){
			auto [r, u] = pq.top();
			pq.pop();
			done[u] = true;
			if(optimal[u] != r) continue;
			for(auto [v, d]: cadj[u]){
				if(done[v]){
					int s = optimal[v];
					if(optimal_ind[u] != optimal_ind[v] && r + s >= d){
						int l = r - s + d >> 1, w = bl.lca(u, v);
						if(bl.steps(u, w, w) >= l) res = TinvT(res, dqs.query_closed_disk(bl.ancestor(u, l), r - l));
						else res = TinvT(res, dqs.query_closed_disk(bl.ancestor(v, d - l), s - (d - l)));
					}
				}
				else if(optimal[v] < r - d){
					if(int i = optimal_ind[v]; ~i && optimal[v] == radius[i]){
						res = TinvT(res, dqs.query_closed_disk(v, radius[optimal_ind[v]]));
					}
					optimal[v] = r - d;
					optimal_ind[v] = optimal_ind[u];
					pq.push({r - d, v});
				}
			}
		}
		for(auto u: center){
			cadj[u].clear();
			optimal[u] = -1;
			optimal_ind[u] = -1;
			done[u] = false;
		}
		for(auto [u, v]: edges){
			cadj[u].clear();
			cadj[v].clear();
			optimal[u] = -1;
			optimal[v] = -1;
			optimal_ind[u] = -1;
			optimal_ind[v] = -1;
			done[u] = false;
			done[v] = false;
		}
		return res;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tree_even_disk_union_query_solver</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
