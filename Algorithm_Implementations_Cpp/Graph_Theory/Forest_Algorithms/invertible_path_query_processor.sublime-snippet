<snippet>
	<content><![CDATA[
// NOTE: prepared data structe must be of size 2*n
// Requires range_minmax_query_solver and lca_solver
template<class T, bool VALS_IN_EDGES = false>
struct invertible_path_query_processor{
	int n;
	vector<int> roots, pv, pe, order, pos, end, sz, root, depth;
	lca_solver ls;
	invertible_path_query_processor(const graph<T> &g, const vector<int> &roots): n(g.n), roots(roots), ls(g, roots){
		pv.assign(n, -1);
		pe.assign(n, -1);
		pos.assign(n, -1);
		end.assign(n, -1);
		sz.assign(n, 1);
		root.assign(n, -1);
		depth.assign(n, 0);
		for(auto r: roots){
			assert(!~pos[r]);
			auto dfs = [&](auto self, int u, int p){
				pos[u] = (int)order.size();
				order.push_back(u);
				root[u] = r;
				for(auto id: g.adj[u]){
					if(p == id || g.ignore && g.ignore(id)) continue;
					auto &e = g.edges[id];
					int v = u ^ e.from ^ e.to;
					pv[v] = u;
					pe[v] = id;
					depth[v] = depth[u] + 1;
					self(self, v, u);
					sz[u] += sz[v];
				}
				end[u] = (int)order.size();
				order.push_back(u);
			};
			dfs(dfs, r, -1);
		}
	}
	// f(p, c): modify position p in data structure with c*x
	// In case of values on edges, modify the value at the incident node with higher depth
	void set(int u, auto f) const{
		f(pos[u], 1), f(end[u], -1);
	}
	// f(r, c) add the sum in [0, r) in the data structre multiplid by c
	// 3 or 4 f() calls
	void query(int u, int v, auto f) const{
		int w = ls.lca(u, v);
		f(pos[u] + 1, 1), f(pos[v] + 1, 1);
		if constexpr(VALS_IN_EDGES) f(pos[w] + 1, -2);
		else{
			f(pos[w] + 1, -1);
			if(~pv[w]) f(pos[pv[w]], -1);
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>invertible_path_query_processor</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
