<snippet>
	<content><![CDATA[
// insert(u): insert vertex u into the state
// answer(u, flag): answer for the subtree of u, flag indicates whether u is included or not
// clear_subtr(u): erase every vertex in the subtree of u from the state
// O(n * log(n)) insert() calls
// answer(u, false) and answer(u, true) is called once for each u
// sum of subtree size of vertex u for all clear_subtr(u) calls is O(n)
// Requires graph
template<class T>
struct small_to_large_on_forest{
	int n;
	graph<T> g;
	vector<int> roots, size, order, pos, end;
	small_to_large_on_forest(const graph<T> &g, const vector<int> &_roots): n(g.n), g(g), size(n, 1), pos(n, -1), end(n, -1), roots(_roots){
		auto dfs = [&](auto self, int u, int pe)->void{
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto id: g.adj[u]){
				if(id == pe || g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				self(self, v, id);
				size[u] += size[v];
			}
			end[u] = (int)order.size();
		};
		for(auto u: roots) assert(!~pos[u]), dfs(dfs, u, -1);
	}
	void solve(int root, auto insert, auto clear_subtr, auto answer){
		auto dfs = [&](auto self, int u, int pe, bool keep)->void{
			int hv = -1, hid = -1;
			for(auto id: g.adj[u]){
				if(id == pe || g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				if(!~hv || size[hv] < size[v]) hv = v, hid = id;
			}
			for(auto id: g.adj[u]){
				if(id == pe || id == hid || g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				self(self, v, id, false);
			}
			if(~hid) self(self, hv, hid, true);
			for(auto id: g.adj[u]){
				if(id == pe || id == hid || g.ignore && g.ignore(id)) continue;
				auto &e = g.edge[id];
				int v = u ^ e.from ^ e.to;
				for(auto i = pos[v]; i < end[v]; ++ i) insert(order[i]);
			}
			answer(u, false), insert(u), answer(u, true);
			if(!keep) clear_subtr(u);
		};
		dfs(dfs, root, -1, false);
	}
	void solve(auto insert, auto clear_subtr, auto answer){
		for(auto r: roots) solve(r, insert, clear_subtr, answer);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>small_to_large_on_forest</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
