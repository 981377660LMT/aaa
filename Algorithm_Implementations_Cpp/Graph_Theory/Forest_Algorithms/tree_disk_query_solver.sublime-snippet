<snippet>
	<content><![CDATA[
// init_step() must be called beforehand
// Requires graph and (centroid_decomposition or shallowest_decomposition)
template<class T, class D, class F = plus<>, class I = minus<>>
struct tree_disk_query_solver{
	int n;
	const D &decomp;
	vector<vector<T>> data;
	vector<vector<vector<T>>> child_data;
	F TT; // Commutative group operation
	T T_id; // Commutative group identity
	I TinvT; // Commutative group inverse operation
	tree_disk_query_solver(T type_deducer, const D &decomp, F TT = plus<>(), T T_id = {}, I TinvT = minus<>()): tree_disk_query_solver(type_deducer, decomp, vector<T>(decomp.n, 1), TT, T_id, TinvT){ }
	// O(n log n) time and memory
	tree_disk_query_solver(T, const D &decomp, const vector<T> &vertex_data, F TT = plus<>(), T T_id = {}, I TinvT = minus<>()): n(decomp.n), decomp(decomp), data(n), child_data(n), TT(TT), T_id(T_id), TinvT(TinvT){
		assert(!decomp.step.empty());
		assert((int)vertex_data.size() == n);
		for(auto s = 0; s < n; ++ s){
			data[s].push_back(T_id);
			data[s].push_back(vertex_data[s]);
			child_data[s].resize(decomp.abr.adj[s].size());
			for(auto t = 0; t < (int)decomp.abr.adj[s].size(); ++ t){
				child_data[s][t].push_back(T_id);
				int u = decomp.abr.edge[decomp.abr.adj[s][t]].to;
				for(auto i = decomp.pos[u]; i < decomp.end[u]; ++ i){
					int v = decomp.order[i];
					int d = decomp.step[v][decomp.depth[v] - decomp.depth[s]] + 1;
					if(d >= (int)data[s].size()) data[s].resize(d + 1, T_id);
					data[s][d] = TT(data[s][d], vertex_data[v]);
					if(d >= (int)child_data[s][t].size()) child_data[s][t].resize(d + 1, T_id);
					child_data[s][t][d] = TT(child_data[s][t][d], vertex_data[v]);
				}
				for(auto d = 1; d < (int)child_data[s][t].size(); ++ d) child_data[s][t][d] = TT(child_data[s][t][d], child_data[s][t][d - 1]);
			}
			for(auto d = 1; d < (int)data[s].size(); ++ d) data[s][d] = TT(data[s][d], data[s][d - 1]);
		}
	}
	// Find the sum of values of v with dist(u, v) < r
	// O(log n)
	T query_open_disk(int u, int r) const{
		int s = u;
		T res = data[u][clamp(r, 0, (int)data[u].size() - 1)];
		for(auto level = 1; ~decomp.pv[u]; ++ level){
			int p = decomp.pv[u], len = decomp.step[s][level];
			if(r < 0) break;
			auto &cur_data = child_data[p][decomp.pos_as_child[u]];
			res = TT(res, TinvT(
				data[p][clamp(r - len, 0, (int)data[p].size() - 1)], cur_data[clamp(r - len, 0, (int)cur_data.size() - 1)]
			));
			u = p;
		}
		return res;
	}
	// Find the sum of values of v with dist(u, v) <= r
	// O(log n)
	T query_closed_disk(int u, int r) const{
		return query_open_disk(u, r + 1);
	}
	// Find the sum of values of v with dist(u, v) = d
	// O(log n)
	T query_ring(int u, int d) const{
		return TinvT(query_closed_disk(u, d), query_open_disk(u, d));
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tree_disk_query_solver</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
