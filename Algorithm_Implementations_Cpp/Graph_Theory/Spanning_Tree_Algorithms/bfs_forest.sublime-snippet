<snippet>
	<content><![CDATA[
// Requires graph
template<class T>
struct bfs_forest{
	int n;
	vector<T> dist;
	vector<int> pv, pe, order, pos, root, depth, was;
	T T_id;
	bfs_forest(int n, T T_id = 0): T_id(T_id){
		init(n);
	}
	void init(int n){
		this->n = n;
		pv.assign(n, -1);
		pe.assign(n, -1);
		order.clear();
		pos.assign(n, -1);
		root.assign(n, -1);
		depth.assign(n, -1);
		dist.assign(n, T_id);
		was.assign(n, -1);
		attempt = 0;
	}
	int attempt = 0;
	template<class U, class F = plus<>>
	void bfs(const graph<U> &g, vector<int> src, bool clear_order = true, F UT = plus<>()){
		assert(n == g.n);
		++ attempt;
		if(clear_order) order.clear();
		deque<int> dq;
		for(auto u: src){
			was[u] = attempt;
			depth[u] = 0;
			dist[u] = T_id;
			root[u] = u;
			pv[u] = pe[u] = -1;
			dq.push_back(u);
		}
		while(!dq.empty()){
			int u = dq.front(); dq.pop_front();
			pos[u] = (int)order.size();
			order.push_back(u);
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edges[id];
				int v = u ^ e.from ^ e.to;
				if(was[v] == attempt) continue;
				was[v] = attempt;
				depth[v] = depth[u] + 1;
				dist[v] = UT(e.cost, dist[u]);
				pv[v] = u;
				pe[v] = id;
				root[v] = root[u];
				dq.push_back(v);
			}
		}
	}
	template<class U, class F = plus<>>
	void bfs_all(const graph<U> &g, F UT = plus<>()){
		for(int u = 0; u < n; ++ u) if(!~depth[u]) bfs<U, F>(g, {u}, false, UT);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bfs_forest</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
