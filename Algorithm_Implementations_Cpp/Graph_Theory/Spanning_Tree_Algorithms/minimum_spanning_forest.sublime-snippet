<snippet>
	<content><![CDATA[
// Requires graph and disjoint_set
template<class T>
vector<int> minimum_spanning_forest(const graph<T> &g){
	vector<int> order((int)g.edges.size());
	iota(order.begin(), order.end(), 0);
	sort(order.begin(), order.end(), [&](int i, int j){ return g.edges[i].cost < g.edges[j].cost; });
	disjoint_set dsu(g.n);
	vector<int> res;
	for(auto id: order){
		if(g.ignore && g.ignore(id)) continue;
		auto &e = g.edges[id];
		if(dsu.merge(e.from, e.to)) res.push_back(id);
	}
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>minimum_spanning_forest</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
