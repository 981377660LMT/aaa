<snippet>
	<content><![CDATA[
// Requires graph
template<class T>
struct dijkstra{
	int n;
	vector<T> dist;
	vector<int> pv, pe, was, order;
	dijkstra(int n){ init(n); }
	void init(int n){
		this->n = n;
		dist.assign(n, numeric_limits<T>::max());
		pv.assign(n, -1);
		pe.assign(n, -1);
		was.assign(n, -1);
		attempt = 0;
	}
	int attempt;
	// O(|E_C| log |V_C|) where
	// V_C is the set of vertices reachable from src and
	// E_C is the set of edges reachable from src
	template<class U>
	void run(const graph<U> &g, const vector<int> &src){
		assert(n == g.n);
		++ attempt;
		priority_queue<pair<T, int>, vector<pair<T, int>>, greater<pair<T, int>>> pq;
		for(auto u: src){
			was[u] = attempt;
			pq.push({dist[u] = {}, u});
			pv[u] = pe[u] = -1;
		}
		order.clear();
		while(!pq.empty()){
			auto [d, u] = pq.top(); pq.pop();
			if(d != dist[u]) continue;
			order.push_back(u);
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				auto &e = g.edges[id];
				int v = u ^ e.from ^ e.to;
				if(was[v] != attempt || dist[u] + e.cost < dist[v]){
					pq.push({dist[v] = dist[u] + e.cost, v});
					pv[v] = u, pe[v] = id, was[v] = attempt;
				}
			}
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dijkstra</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
