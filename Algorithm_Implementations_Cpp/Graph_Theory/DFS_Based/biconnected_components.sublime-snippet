<snippet>
	<content><![CDATA[
struct biconnected_components{
	int n, attempt = 0;
	biconnected_components(int n): n(n), pos(n), was(n, -1){ }
	vector<int> pos, stack, was;
	// O(n + m) where n and m are the number of reachable nodes and edges respectively.
	// Requires graph
	template<class T>
	void run(const graph<T> &g, const vector<int> &init, auto act_comp, auto act_bridge){
		assert(n == g.n);
		int it = 0;
		auto dfs = [&](auto self, int u, int pe)->int{
			int top = pos[u] = ++ it;
			was[u] = attempt;
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id) || id == pe) continue;
				int v = u ^ g.edge[id].from ^ g.edge[id].to;
				if(was[v] != attempt){
					was[v] = attempt;
					pos[v] = 0;
				}
				if(pos[v]){
					top = min(top, pos[v]);
					if(pos[v] < pos[u]) stack.push_back(id);
				}
				else{
					int sz = (int)stack.size(), up = self(self, v, id);
					top = min(top, up);
					if(up == pos[u]){
						stack.push_back(id);
						act_comp(vector<int>{stack.begin() + sz, stack.end()});
						stack.resize(sz);
					}
					else if(up < pos[u]) stack.push_back(id);
					else act_bridge(id);
				}
			}
			return top;
		};
		for(auto u: init) if(was[u] != attempt) dfs(dfs, u, -1);
		++ attempt;
	}
	template<class T>
	void run_all(const graph<T> &g, auto act_comp, auto act_bridge){
		assert(n == g.n);
		vector<int> init(n);
		iota(init.begin(), init.end(), 0);
		run(g, init, act_comp, act_bridge);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>biconnected_components</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
