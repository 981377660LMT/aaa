<snippet>
	<content><![CDATA[
// Requires graph and strongly_connected_components
struct condensation{
	vector<int> id; // id[u]: component id of u
	vector<vector<int>> component; // 
	graph<int> g; // condensation, nodes are topologically sorted, edge weight equals original edge id
	condensation(){ }
	template<class T>
	condensation(const graph<T> &g){
		int n = g.n;
		id.resize(n);
		strongly_connected_components(g, [&](const vector<int> &c){ component.push_back(c); });
		reverse(component.begin(), component.end());
		for(auto i = 0; i < (int)component.size(); ++ i) for(auto u: component[i]) id[u] = i;
		this->g = {(int)component.size()};
		for(auto id = 0; id < (int)g.edge.size(); ++ id){
			if(g.ignore && g.ignore(id)) continue;
			auto [u, v, w] = g.edge[id];
			if(this->id[u] != this->id[v]) this->g.orient(this->id[u], this->id[v], id);
		}
	}
	int size() const{
		return (int)component.size();
	}
	friend ostream &operator<<(ostream &out, const condensation &c){
		out << "id: ";
		for(auto u: c.id) out << u << " ";
		out << "\nComponents\n";
		for(auto c: c.component){
			out << "{";
			for(auto u: c) out << u << " ";
			out << "}\n";
		}
		out << "edges\n";
		for(auto id = 0; id < (int)c.g.edge.size(); ++ id){
			if(c.g.ignore && c.g.ignore(id)) continue;
			auto [u, v, w] = c.g.edge[id];
			out << u << " -> " << v << " " << id << "\n";
		}
		return out;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>condensation</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
