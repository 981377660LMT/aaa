<snippet>
	<content><![CDATA[
// Returns a length n power_series P where P(x[i]) = y[i] for all 0<=i<n
// O(polymul(n) * log(n))
// Requires power_series
template<class T, class FFT = ntt>
power_series_base<T, FFT> interpolation(const vector<T> &x, const vector<T> &y){
	assert(x.size() == y.size());
	if(x.empty()) return {};
	int n = (int)x.size();
	vector<power_series_base<T, FFT>> tree(n << 1);
	auto build = [&](auto self, int u, int l, int r)->void{
		if(r - l == 1) tree[u] = vector<T>{-x[l], 1};
		else{
			int m = l + (r - l >> 1), v = u + (m - l << 1);
			self(self, u + 1, l, m), self(self, v, m, r);
			tree[u] = tree[u + 1] * tree[v];
		}
	};
	build(build, 0, 0, n);
	power_series_base<T, FFT> val(n);
	auto eval = [&](auto self, int u, int l, int r, power_series_base<T, FFT> f)->void{
		f %= tree[u];
		if((int)f.size() < 200){
			for(auto i = l; i < r; ++ i) val[i] = f.evaluate(x[i]);
			return;
		}
		if(r - l == 1) val[l] = f[0];
		else{
			int m = l + (r - l >> 1), v = u + (m - l << 1);
			self(self, u + 1, l, m, f), self(self, v, m, r, f);
		}
	};
	eval(eval, 0, 0, n, tree[0].derivative());
	for(auto i = 0; i < n; ++ i) val[i] = y[i] / val[i];
	auto calc = [&](auto self, int u, int l, int r)->power_series_base<T, FFT>{
		if(r - l == 1) return {val[l]};
		int m = l + (r - l >> 1), v = u + (m - l << 1);
		return self(self, u + 1, l, m) * tree[v] + self(self, v, m, r) * tree[u + 1];
	};
	return calc(calc, 0, 0, n);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>interpolation</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
