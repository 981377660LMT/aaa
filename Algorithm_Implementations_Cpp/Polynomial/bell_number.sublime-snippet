<snippet>
	<content><![CDATA[
// O(polymul(n-term polynomial))
// Requires polynomial
template<class T>
vector<T> bell_number(int n){
	if(n == 0) return {};
	static vector<T> fact{1}, invfact{1};
	if(auto sz = (int)fact.size(); sz < n){
		for(auto i = sz; i < n; ++ i) fact.push_back(fact.back() * i);
		invfact.resize(n), invfact[n - 1] = 1 / fact.back();
		for(auto i = n - 2; i >= sz; -- i) invfact[i] = invfact[i + 1] * (i + 1);
	}
	auto f = exponential<modular>({0, 1}, n);
	static vector<T> a;
	a.resize(n);
	copy(invfact.begin(), invfact.begin() + n, a.begin());
	a[0] = 0;
	inplace_exponential(a, n);
	for(auto i = 2; i < n; ++ i) a[i] *= fact[i];
	return a;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hello</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
