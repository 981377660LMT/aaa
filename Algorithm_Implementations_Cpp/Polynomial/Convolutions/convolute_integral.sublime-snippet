<snippet>
	<content><![CDATA[
// Safe for sum(p[i]^2 + q[i]^2) lg2(n) < 9e14
// O(n log n)
// Requires fast_fourier_transform
template<class T>
vector<T> convolute_integral(const vector<T> &p, const vector<T> &q){
	if(min(p.size(), q.size()) < 150){
		vector<T> res((int)p.size() + (int)q.size() - 1);
		for(auto i = 0; i < p.size(); ++ i) for(auto j = 0; j < q.size(); ++ j) res[i + j] += p[i] * q[j];
		return res;
	}
	int n = 1 << __lg((int)p.size() + (int)q.size() - 1) + 1;
	vector<complex<double>> f(n), g(n);
	copy(p.begin(), p.end(), f.begin());
	for(auto i = 0; i < (int)q.size(); ++ i) f[i].imag(q[i]);
	fast_fourier_transform(f);
	for(auto &x: f) x *= x;
	for(auto i = 0; i < n; ++ i) g[i] = f[i] - conj(f[-i & n - 1]);
	fast_fourier_transform(g, true);
	vector<T> res((int)p.size() + (int)q.size() - 1);
	for(auto i = 0; i < (int)res.size(); ++ i) res[i] = round(g[i].imag() / 4);
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>convolute_integral</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
