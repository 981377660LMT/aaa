<snippet>
	<content><![CDATA[
// O(polymul(n) * log(n))
// Requires mod_sqrt and polynomial
template<class T, class FFT = ntt>
optional<polynomial_base<T, FFT>> polynomial_sqrt(polynomial_base<T, FFT> a, int length){
	a.resize(length);
	int i = find_if(a.begin(), a.end(), [&](auto x){ return x != 0; }) - a.begin();
	if(i == length) return a;
	if(i & 1) return {};
	a.erase(a.begin(), a.begin() + i);
	length -= i >>= 1;
	T c;
	if(auto p = mod_sqrt(a[0])) c = *p, a /= a[0];
	else return {};
	polynomial_base<T, FFT> b, x;
	b = {1};
	T inv2 = T(1) / 2;
	while((int)b.size() < length){
		b.resize(b.size() << 1);
		x.resize(min(a.size(), b.size()));
		copy(a.begin(), a.begin() + x.size(), x.begin());
		x *= b.inverse(b.size());
		for(auto i = b.size() / 2; i < min(b.size(), x.size()); ++ i) b[i] = x[i] * inv2;
	}
	b.resize(length);
	for(auto &x: b) x *= c;
	b.insert(b.begin(), i, 0);
	return b;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>polynomial_sqrt</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
