<snippet>
	<content><![CDATA[
// NTTmod: 998244353(2^23*7*17,3),754974721(2^24*3^2*5,11),469762049(2^26*7,3),167772161(2^25*5,3)
// Requires modular
template<class T, int root = 15311432, int root_pw = 1 << 23, int inv_root = 469870224>
void number_theoric_transform(vector<T> &a, const bool invert = false){
	int n = (int)a.size();
	for(auto i = 1, j = 0; i < n; ++ i){
		int bit = n >> 1;
		for(; j & bit; bit >>= 1) j ^= bit;
		j ^= bit;
		if(i < j) swap(a[i], a[j]);
	}
	for(auto len = 1; len < n; len <<= 1){
		T wlen = invert ? inv_root : root;
		for(auto i = len << 1; i < root_pw; i <<= 1) wlen *= wlen;
		for(auto i = 0; i < n; i += len << 1){
			T w = 1;
			for(auto j = 0; j < len; ++ j, w *= wlen){
				T u = a[i + j], v = a[i + j + len] * w;
				a[i + j] = u + v, a[i + j + len] = u - v;
			}
		}
	}
	if(invert){
		T inv_n = T(1) / n;
		for(auto &x: a) x *= inv_n;
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>number_theoric_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
