<snippet>
	<content><![CDATA[
// T must be of modular type
// mod must be a prime
// Requires modular
template<class T>
struct number_theoric_transform_wrapper{
	// i \in [2^k, 2^{k+1}) holds w_{2^k+1}^{i-2^k}
	static vector<T> root;
	static void adjust_root(int n){
		if(root.empty()) root = {1, 1};
		for(auto k = (int)root.size(); k < n; k <<= 1){
			root.resize(n, 1);
			T w = T::primitive_root() ^ (T::mod() - 1) / (k << 1);
			for(auto i = k; i < k << 1; ++ i) root[i] = i & 1 ? root[i >> 1] * w : root[i >> 1];
		}
	}
	// n must be a power of two
	// O(n * log(n))
	static void transform(vector<T> &p, bool invert = false){
		int n = (int)p.size();
		assert(n && __builtin_popcount(n) == 1 && (T::mod() - 1) % n == 0);
		for(auto i = 1, j = 0; i < n; ++ i){
			int bit = n >> 1;
			for(; j & bit; bit >>= 1) j ^= bit;
			j ^= bit;
			if(i < j) swap(p[i], p[j]);
		}
		adjust_root(n);
		for(auto len = 1; len < n; len <<= 1) for(auto i = 0; i < n; i += len << 1) for(auto j = 0; j < len; ++ j){
			T x = p[i + j], y = p[len + i + j] * root[len + j];
			p[i + j] = x + y, p[len + i + j] = x - y;
		}
		if(invert){
			reverse(p.begin() + 1, p.end());
			T inv_n = T(1) / n;
			for(auto &x: p) x *= inv_n;
		}
	}
	static vector<T> buffer1, buffer2;
	// Double the length of the ntt array
	// n must be a power of two
	// O(n * log(n))
	static void double_up(vector<T> &p){
		int n = (int)p.size();
		assert(n && __builtin_popcount(n) == 1 && (T().mod() - 1) % (n << 1) == 0);
		buffer1.resize(n << 1);
		for(auto i = 0; i < n; ++ i) buffer1[i << 1] = p[i];
		transform(p, true);
		adjust_root(n << 1);
		for(auto i = 0; i < n; ++ i) p[i] *= root[n | i];
		transform(p);
		for(auto i = 0; i < n; ++ i) buffer1[i << 1 | 1] = p[i];
		p = buffer1;
	}
	// O(n * m)
	static vector<T> convolute_naive(const vector<T> &p, const vector<T> &q){
		vector<T> res(max((int)p.size() + (int)q.size() - 1, 0));
		for(auto i = 0; i < (int)p.size(); ++ i) for(auto j = 0; j < (int)q.size(); ++ j) res[i + j] += p[i] * q[j];
		return res;
	}
	// O((n + m) * log(n + m))
	static vector<T> convolute(const vector<T> &p, const vector<T> &q){
		if(min(p.size(), q.size()) < 55) return convolute_naive(p, q);
		int m = (int)p.size() + (int)q.size() - 1, n = 1 << __lg(m) + 1;
		buffer1.assign(n, 0);
		copy(p.begin(), p.end(), buffer1.begin());
		transform(buffer1);
		buffer2.assign(n, 0);
		copy(q.begin(), q.end(), buffer2.begin());
		transform(buffer2);
		for(auto i = 0; i < n; ++ i) buffer1[i] *= buffer2[i];
		transform(buffer1, true);
		return vector<T>(buffer1.begin(), buffer1.begin() + m);
	}
	// O(n * log(n))
	static vector<T> square(const vector<T> &p){
		if(p.size() < 40) return convolute_naive(p, p);
		int m = (int)p.size() * 2 - 1, n = 1 << __lg(m) + 1;
		buffer1.assign(n, 0);
		copy(p.begin(), p.end(), buffer1.begin());
		transform(buffer1);
		for(auto i = 0; i < n; ++ i) buffer1[i] *= buffer1[i];
		transform(buffer1, true);
		return vector<T>(buffer1.begin(), buffer1.begin() + m);
	}
};
template<class T> vector<T> number_theoric_transform_wrapper<T>::root;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer1;
template<class T> vector<T> number_theoric_transform_wrapper<T>::buffer2;

using ntt = number_theoric_transform_wrapper<modular>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>number_theoric_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
