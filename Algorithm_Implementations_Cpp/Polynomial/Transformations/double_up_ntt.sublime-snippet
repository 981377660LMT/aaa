<snippet>
	<content><![CDATA[
// T must be of modular type
// Requires modular and number_theoric_transform
template<class T, int primitive_root = 3>
void double_up_ntt(vector<T> &p){
	int n = (int)size(p);
	assert(n && __builtin_popcount(n) == 1 && (T().mod() - 1) % (n << 1) == 0);
	vector<T> res(n << 1);
	for(auto i = 0; i < n; ++ i) res[i << 1] = p[i];
	number_theoric_transform(p, true);
	T w = T(primitive_root) ^ (T().mod() - 1) / n / 2, pw = 1;
	for(auto i = 0; i < n; ++ i, pw *= w) p[i] *= pw;
	number_theoric_transform(p);
	for(auto i = 0; i < n; ++ i) res[i << 1 | 1] = p[i];
	swap(p, res);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>double_up_ntt</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
