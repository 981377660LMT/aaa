<snippet>
	<content><![CDATA[
// T must support *=, *, +=, -=, and -
// T{} should return the additive identity
// Requires modular and number_theoric_transform
template<class T, class ntt>
struct polynomial_base{
	vector<T> data;
	polynomial_base(){}
	polynomial_base(int n): data(n){}
	polynomial_base(int n, T x): data(n, x){}
	polynomial_base(const vector<T> &p): data(p){}
	polynomial_base(const initializer_list<T> &l): data(l){}
	template<class It>
	polynomial_base(It begin, It end): data(begin, end){}
	size_t size() const{
		return (int)data.size();
	}
	void resize(int n, T x = {}){
		data.resize(n, x);
	}
	int degree() const{
		return data.empty() ? numeric_limits<int>::max() : size() - 1;
	}
	T &operator[](int i){
		return data[i];
	}
	const T &operator[](int i) const{
		return data[i];
	}
	operator vector<T>() const{
		return data;
	}
	operator bool() const{
		return !data.empty();
	}
	typename vector<T>::iterator begin(){
		return data.begin();
	}
	typename vector<T>::iterator end(){
		return data.end();
	}
	T evaluate(T x) const{
		T res = {};
		for(auto i = (int)data.size() - 1; i >= 0; -- i) res = res * x + data[i];
		return res;
	}
	polynomial_base operator*(const polynomial_base &p) const{
		return ntt::convolute(data, p.data);
	}
	polynomial_base &operator*=(const vector<T> &p){
		return *this = *this * p;
	}
	template<class U>
	polynomial_base &operator*=(U x){
		for(auto &c: data) c *= x;
		return *this;
	}
	template<class U>
	polynomial_base operator*(U x) const{
		return polynomial_base(*this) *= x;
	}
	template<class U>
	friend polynomial_base operator*(U x, polynomial_base p){
		for(auto &c: p) c = x * c;
		return p;
	}
	polynomial_base &operator+=(const polynomial_base &p){
		data.resize(max(size(), p.size()));
		for(auto i = 0; i < (int)p.size(); ++ i) data[i] += p[i];
		return *this;
	}
	polynomial_base operator+(const polynomial_base &p) const{
		return polynomial_base(*this) += p;
	}
	polynomial_base &operator+=(const T &x){
		if(data.empty()) data.emplace_back();
		data[0] += x;
		return *this;
	}
	polynomial_base operator+(const T &x) const{
		return polynomial_base(*this) += x;
	}
	friend polynomial_base operator+(const T &x, const polynomial_base &p){
		return p + x;
	}
	polynomial_base &operator-=(const polynomial_base &p){
		data.resize(max(size(), p.size()));
		for(auto i = 0; i < (int)p.size(); ++ i) data[i] -= p[i];
		return *this;
	}
	polynomial_base operator-(const polynomial_base &p) const{
		return polynomial_base(*this) -= p;
	}
	polynomial_base &operator-=(const T &x){
		if(data.empty()) data.emplace_back();
		data[0] -= x;
		return *this;
	}
	polynomial_base operator-(const T &x) const{
		return polynomial_base(*this) -= x;
	}
	friend polynomial_base operator-(const T &x, const polynomial_base &p){
		return p - x;
	}
	polynomial_base operator-() const{
		polynomial_base res = *this;
		for(auto i = 0; i < size(); ++ i) res[i] = T{} - res[i];
		return res;
	}
	// Returns the first length terms of the inverse series
	// O(n * log(n))
	polynomial_base inverse(size_t length) const{
		assert(!data.empty() && data[0]);
		static vector<T> a, b;
		b = {1 / data[0]};
		while(b.size() < length){
			a.assign(b.size() << 2, {});
			copy(data.begin(), data.begin() + min(b.size() << 1, data.size()), a.begin());
			ntt::transform(a);
			b.resize(b.size() << 2);
			ntt::transform(b);
			for(auto i = 0; i < (int)b.size(); ++ i) b[i] = 2 * b[i] - a[i] * b[i] * b[i];
			ntt::transform(b, true);
			b.resize((int)b.size() >> 1);
		}
		return vector<T>(b.begin(), b.begin() + length);
	}
	// Returns the first length terms of the inverse series
	// O(n * log(n))
	polynomial_base &inplace_inverse(size_t length){
		return *this = this->inverse(length);
	}
	// Euclidean division
	// O(n * log(n))
	polynomial_base &operator/=(const polynomial_base &p){
		if(data.size() < p.size()){
			data.clear();
			return *this;
		}
		static vector<T> &b;
		int n = data.size() - p.size() + 1;
		b.assign(n, {});
		copy(p.rbegin(), p.rbegin() + min(p.size(), b.size()), b.begin());
		reverse(data.begin(), data.end());
		data = ntt::convolute(data, b.inverse(n));
		data.erase(data.begin() + n, data.end());
		reverse(data.begin(), data.end());
		return *this;
	}
	polynomial_base operator/(const polynomial_base &p) const{
		return polynomial_base(*this) /= p;
	}
	polynomial_base &operator/=(T x){
		assert(x);
		T inv_x = 1 / x;
		for(auto &c: data) c *= inv_x;
		return *this;
	}
	polynomial_base operator/(T x) const{
		return polynomial_base(*this) /= x;
	}
	pair<polynomial_base, polynomial_base> divrem(const polynomial_base &p) const{
		auto q = *this / p, r = *this - q * p;
		while(!r.empty() && r.back() == 0) r.pop_back();
		return {q, r};
	}
	polynomial_base operator%(const polynomial_base &p) const{
		return this->divrem(p).second;
	}
	polynomial_base &operator%=(const polynomial_base &p) const{
		return *this = *this % p;
	}
	polynomial_base &inplace_derivative(){
		if(!data.empty()){
			for(auto i = 0; i < (int)data.size(); ++ i) data[i] *= i;
			data.erase(data.begin());
		}
		return *this;
	}
	polynomial_base derivative() const{
		return polynomial_base(*this).inplace_derivative();
	}
	polynomial_base &inplace_antiderivative(){
		data.insert(data.begin(), 0);
		T::precalc_inverse(data.size());
		for(auto i = 1; i < (int)data.size(); ++ i) data[i] /= i;
		return *this;
	}
	polynomial_base antiderivative() const{
		return polynomial_base(*this).inplace_antiderivative();
	}
	polynomial_base &inplace_log(size_t length){
		assert(!data.empty() && data[0] == 1);
		if(!length){
			data.clear();
			return *this;
		}
		(*this = derivative() * inverse(length)).resize(length - 1);
		inplace_antiderivative();
		return *this;
	}
	polynomial_base log(size_t length) const{
		return polynomial_base(*this).inplace_log(length);
	}
	polynomial_base exp(size_t length) const{
		assert(!data.empty() && data[0] == 0);
		static polynomial_base a, b;
		b = {1};
		while(b.size() < length){
			size_t s = b.size() << 1;
			a.data.assign(s, {});
			copy(data.begin(), data.begin() + min(s, data.size()), a.begin());
			++ a[0];
			(b = ntt::convolute(b, a - b.log(s))).resize(s);
		}
		b.resize(length);
		return b;
	}
	polynomial_base &inplace_exp(size_t length){
		return *this = this->exp(length);
	}
	template<class U>
	polynomial_base &inplace_power(U e, size_t length){
		data.resize(length);
		if(e == 0 || length == 0){
			if(length) data[0] = 1;
			return *this;
		}
		if(e < 0) return inplace_inverse(length).inplace_power(-e, length);
		if(all_of(data.begin(), data.end(), [&](auto x){ return x == 0; })) return *this;
		size_t pivot = find_if(data.begin(), data.end(), [&](auto x){ return x; }) - data.begin();
		if(pivot && e >= (length + pivot - 1) / pivot){
			fill(data.begin(), data.end(), 0);
			return *this;
		}
		data.erase(data.begin(), data.begin() + pivot);
		length -= pivot * e;
		T pivot_c = data[0] ^ e;
		((*this /= data[0]).inplace_log(length) *= e).inplace_exp(length);
		data.insert(data.begin(), pivot * e, 0);
		return *this *= pivot_c;
	}
	template<class U>
	polynomial_base power(U e, size_t length) const{
		return polynomial_base(*this).inplace_power(e, length);
	}
	static polynomial_base multiply_all(const vector<polynomial_base> &a){
		if(a.empty()) return {1};
		auto solve = [&](auto self, int l, int r)->polynomial_base{
			if(r - l == 1) return a[l];
			int m = l + (r - l >> 1);
			return self(self, l, m) * self(self, m, r);
		};
		return solve(solve, 0, (int)a.size());
	}
};

using polynomial = polynomial_base<modular, ntt>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>polynomial</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
