<snippet>
	<content><![CDATA[
// O(n log n)
// Requires number_theoric_transform and convolute_ntt
template<class T>
vector<T> operator*(const vector<T> &p, const vector<T> &q){
	return convolute_ntt(p, q);
}

/*
// O(n log n)
// Requires fast_fourier_transform and convolute_integral
template<class T>
vector<T> operator*(const vector<T> &p, const vector<T> &q){
	return convolute_integral(p, q);
}
*/
/*
// O(n log n)
// Requires fast_fourier_transform and convolute_modular
template<class T>
vector<T> operator*(const vector<T> &p, const vector<T> &q){
	return convolute_modular(p, q);
}
*/
/*
// Naive multiplication
// O(n m)
template<class T>
vector<T> operator*(const vector<T> &a, const vector<T> &b){
	if(a.empty() || b.empty()) return {};
	vector<T> c(a.size() + b.size() - 1, 0);
	for(auto i = 0; i < (int)a.size(); ++ i) for(auto j = 0; j < (int)b.size(); ++ j) c[i + j] += a[i] * b[j];
	return c;
}
*/
template<class T>
vector<T> &operator*=(vector<T> &a, const vector<T> &b){
	return a = a * b;
}
template<class T, class U>
vector<T> &operator*=(vector<T> &a, U x){
	for(auto &c: a) c *= x;
	return a;
}
template<class T, class U>
vector<T> operator*(const vector<T> &a, U x){
	vector<T> b = a;
	return b *= x;
}
template<class T, class U>
vector<T> operator*(U x, const vector<T> &a){
	vector<T> b = a;
	return b *= x;
}
template<class T>
vector<T> &operator+=(vector<T> &a, const vector<T> &b){
	if(a.size() < b.size()) a.resize(b.size());
	for(auto i = 0; i < (int)b.size(); ++ i) a[i] += b[i];
	return a;
}
template<class T>
vector<T> operator+(const vector<T> &a, const vector<T> &b){
	vector<T> c = a;
	return c += b;
}
template<class T>
vector<T> &operator-=(vector<T> &a, const vector<T> &b){
	if(a.size() < b.size()) a.resize(b.size());
	for(auto i = 0; i < (int)b.size(); ++ i) a[i] -= b[i];
	return a;
}
template<class T>
vector<T> operator-(const vector<T> &a, const vector<T> &b){
	vector<T> c = a;
	return c -= b;
}
template<class T>
vector<T> operator-(const vector<T> &a){
	vector<T> c = a;
	for(auto i = 0; i < (int)c.size(); ++ i) c[i] = -c[i];
	return c;
}
// Returns the first length terms of the inverse of a
template<class T>
vector<T> inverse(const vector<T> &a, int length){
	assert(!a.empty() && a[0]);
	static vector<T> b;
	b = {1 / a[0]};
	while((int)b.size() < length){
		static vector<T> x;
		x.assign(min(a.size(), b.size() << 1), 0);
		copy(a.begin(), a.begin() + x.size(), x.begin());
		x *= b * b;
		b.resize(b.size() << 1);
		for(auto i = (int)b.size() >> 1; i < (int)min(x.size(), b.size()); ++ i) b[i] = -x[i];
	}
	b.resize(length);
	return b;
}
template<class T>
vector<T> &inplace_inverse(vector<T> &a, int length){
	return a = inverse(a, length);
}
template<class T>
vector<T> &operator/=(vector<T> &a, const vector<T> &b){
	int n = (int)a.size(), m = (int)b.size();
	if(n < m) a.clear();
	else{
		static vector<T> d;
		d.assign(n - m + 1, 0);
		copy(b.rbegin(), b.rbegin() + min(b.size(), d.size()), d.begin());
		reverse(a.begin(), a.end());
		a *= inverse(d, n - m + 1);
		a.erase(a.begin() + n - m + 1, a.end());
		reverse(a.begin(), a.end());
	}
	return a;
}
template<class T>
vector<T> operator/(const vector<T> &a, const vector<T> &b){
	vector<T> c = a;
	return c /= b;
}
template<class T>
vector<T> &operator/=(vector<T> &a, T x){
	T inv_x = 1 / x;
	for(auto &c: a) c *= inv_x;
	return a;
}
template<class T>
vector<T> operator/(const vector<T> &a, T x){
	vector<T> b = a;
	return b /= x;
}
template<class T>
pair<vector<T>, vector<T>> divrem(const vector<T> &a, const vector<T> &b){
	auto q = a / b, r = a - q * b;
	while(!r.empty() && r.back() == 0) r.pop_back();
	return {q, r};
}
template<class T>
vector<T> operator%(const vector<T> &a, const vector<T> &b){
	return divrem(a, b).second;
}
template<class T>
vector<T> &operator%=(vector<T> &a, const vector<T> &b){
	return a = a % b;
}
template<class T>
vector<T> &inplace_derivative(vector<T> &a){
	for(auto i = 0; i < (int)a.size(); ++ i) a[i] *= i;
	if(!a.empty()) a.erase(a.begin());
	return a;
}
template<class T>
vector<T> derivative(const vector<T> &a){
	auto c = a;
	return inplace_derivative(c);
}
template<class T>
vector<T> &inplace_antiderivative(vector<T> &a){
	a.insert(a.begin(), 0);
	precalc_inverse<T>((int)a.size());
	for(auto i = 1; i < (int)a.size(); ++ i) a[i] /= i;
	return a;
}
template<class T>
vector<T> antiderivative(const vector<T> &a){
	auto c = a;
	return inplace_antiderivative(c);
}
template<class T>
vector<T> &inplace_logarithm(vector<T> &a, int length){
	assert(!a.empty() && a[0] == 1);
	inplace_antiderivative(a = derivative(a) * inverse(a, length)).resize(length);
	return a;
}
template<class T>
vector<T> logarithm(const vector<T> &a, int length){
	assert(!a.empty() && a[0] == 1);
	auto b = a;
	return inplace_logarithm(b, length);
}
template<class T>
vector<T> exponential(const vector<T> &a, int length){
	assert(!a.empty() && a[0] == 0);
	static vector<T> b;
	b = {1};
	while((int)b.size() < length){
		static vector<T> x;
		b.resize(b.size() << 1);
		x.assign(min(a.size(), b.size()), 0);
		copy(a.begin(), a.begin() + min(a.size(), b.size()), x.begin());
		++ x[0];
		(x -= logarithm(b, (int)b.size())) *= vector<T>(b.begin(), b.begin() + (int)b.size() / 2);
		for(auto i = b.size() / 2; i < min(x.size(), b.size()); ++ i) b[i] = x[i];
	}
	b.resize(length);
	return b;
}
template<class T>
vector<T> &inplace_exponential(vector<T> &a, int length){
	return a = exponential(a, length);
}
template<class T, class U>
vector<T> &inplace_power(vector<T> &a, U e, int length){
	a.resize(length);
	if(e == 0 || length == 0){
		if(length) a[0] = 1;
		return a;
	}
	if(e < 0) return inplace_power(inplace_inverse(a, length), -e, length);
	if(all_of(a.begin(), a.end(), [&](auto x){ return x == 0; })) return a;
	int pivot = find_if(a.begin(), a.end(), [&](auto x){ return x; }) - a.begin();
	if(pivot && e >= length / pivot){
		fill(a.begin(), a.end(), 0);
		return a;
	}
	a.erase(a.begin(), a.begin() + pivot);
	length -= pivot * e;
	T temp = a[0], pivot_c = 1;
	for(auto f = e; f; f >>= 1, temp *= temp) if(f & 1) pivot_c *= temp;
	inplace_exponential(inplace_logarithm(a /= a[0], length) *= e, length);
	a.insert(a.begin(), pivot * e, 0);
	return a *= pivot_c;
}
template<class T, class U>
vector<T> power(const vector<T> &a, U e, int length){
	auto b = a;
	return inplace_power(b, e, length);
}
template<class T>
vector<T> multiply_all(const vector<vector<T>> &a){
	if(a.empty()) return {0};
	auto solve = [&](auto self, int l, int r)->vector<T>{
		if(r - l == 1) return a[l];
		int m = l + (r - l >> 1);
		return self(self, l, m) * self(self, m, r);
	};
	return solve(solve, 0, (int)a.size());
}
template<class T, class U>
T evaluate(const vector<T> &a, U x){
	T res = {};
	for(auto i = (int)a.size() - 1; i >= 0; -- i) res = res * x + a[i];
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>polynomial</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
