<snippet>
	<content><![CDATA[
// Returns p(X-d)
// O(polymul(n-term polynomial))
template<class T>
vector<T> taylor_shift(const vector<T> &p, T d, auto polymul){
	if((int)p.size() <= 1) return p;
	int n = (int)p.size();
	static vector<T> fact{1}, invfact{1};
	if(auto sz = (int)fact.size(); sz < n){
		for(auto i = sz; i < n; ++ i) fact.push_back(fact.back() * i);
		invfact.resize(n), invfact[n - 1] = 1 / fact.back();
		for(auto i = n - 2; i >= sz; -- i) invfact[i] = invfact[i + 1] * (i + 1);
	}
	vector<T> f = p, g(n);
	T pow = 1;
	for(auto i = 0; i < n; ++ i){
		f[i] *= fact[i];
		g[i] = pow * invfact[i];
		pow *= -d;
	}
	reverse(g.begin(), g.end());
	f = polymul(f, g);
	f.erase(f.begin(), f.begin() + n - 1);
	for(auto i = 0; i < n; ++ i) f[i] *= invfact[i];
	return f;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>taylor_shift</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
