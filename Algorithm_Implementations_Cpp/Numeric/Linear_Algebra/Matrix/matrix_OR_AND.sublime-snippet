<snippet>
	<content><![CDATA[
template<size_t SZ>
struct matrix_OR_AND_base: vector<bitset<SZ>>{
	using C = vector<bitset<SZ>>;
	using C::assign;
	matrix_OR_AND_base &operator+=(const matrix_OR_AND_base &M){
		assert(n == M.n && m == M.m);
		for(auto i = 0; i < n; ++ i) (*this)[i] |= M[i];
		return *this;
	}
	matrix_OR_AND_base operator+(const matrix_OR_AND_base &M) const{
		matrix_OR_AND_base res(n, m);
		res += M;
		return res;
	}
	matrix_OR_AND_base operator*(const matrix_OR_AND_base &otr) const{
		assert(m == otr.n);
		int l = otr.m;
		matrix_OR_AND_base res(n, l);
		vector<bitset<SZ>> temp(l);
		for(auto i = 0; i < l; ++ i) for(auto j = 0; j < m; ++ j) temp[i][j] = otr[j][i];
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < l; ++ j) res[i][j] = ((*this)[i] & temp[j]).any();
		return res;
	}
	matrix_OR_AND_base &operator*=(const matrix_OR_AND_base &otr){
		return *this = *this * otr;
	}
	matrix_OR_AND_base &operator*=(bool c){
		if(!c) for(auto &v: *this) v.reset();
		return *this;
	}
	matrix_OR_AND_base operator*(bool c) const{
		matrix_OR_AND_base res(*this); res *= c;
		return res;
	}
	matrix_OR_AND_base &operator^=(long long e){
		matrix_OR_AND_base res(n, n, true);
		for(; e; *this *= *this, e >>= 1) if(e & 1) res *= *this;
		return *this = res;
	}
	matrix_OR_AND_base operator^(long long e) const{
		assert(n == m);
		matrix_OR_AND_base res(*this); res ^= e;
		return res;
	}
	matrix_OR_AND_base transposed() const{
		matrix_OR_AND_base res(m, n);
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) res[j][i] = (*this)[i][j];
		return res;
	}
	matrix_OR_AND_base &transpose(){
		return *this = transposed();
	}
	vector<int> operator*(const bitset<SZ> &v) const{
		vector<int> res(n);
		for(auto i = 0; i < n; ++ i) res[i] = ((*this)[i] * v).any();
		return res;
	}
	int n, m;
	matrix_OR_AND_base(int n, int m, bool init_diagonal = false, bool init_off_diagonal = false): n(n), m(m){
		assign(n, {});
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) (*this)[i][j] = i == j ? init_diagonal : init_off_diagonal;
	}
	matrix_OR_AND_base(const C &arr): n((int)arr.size()), m((int)arr[0].size()){
		assign(n, {});
		for(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) (*this)[i][j] = arr[i][j];
	}
};
template<size_t SZ>
matrix_OR_AND_base<SZ> operator*(bool c, matrix_OR_AND_base<SZ> M){
	if(!c) for(auto &v: M) v.reset();
	return M;
}
template<size_t SZ>
vector<int> operator*(const vector<int> &v, const matrix_OR_AND_base<SZ> &M){
	vector<int> res(M.m);
	for(auto i = 0; i < M.n; ++ i) for(auto j = 0; j < M.m; ++ j) res[j] |= v[i] & M[i][j];
	return res;
}
template<size_t SZ>
vector<int> &operator*=(vector<int> &v, const matrix_OR_AND_base<SZ> &M){
	return v = v * M;
}
const size_t SZ = 1000;
using matrix_OR_AND = matrix_OR_AND_base<SZ>;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrix_OR_AND</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
