<snippet>
	<content><![CDATA[
// O(n log^2 n)
// Requires fast_walsh_hadamard_transform
template<class T>
vector<T> convolute_subset(vector<T> p, vector<T> q){
	int n = max({(int)p.size(), (int)q.size() - 1, 1});
	if(__builtin_popcount(n) != 1) n = 1 << __lg(n) + 1;
	int w = __lg(n);
	p.resize(n), q.resize(n);
	vector a(w + 1, vector<Zp>(n)), b(a);
	for(auto i = 0; i < n; ++ i) a[__builtin_popcount(i)][i] = p[i];
	for(auto i = 0; i < n; ++ i) b[__builtin_popcount(i)][i] = q[i];
	for(auto bit = 0; bit <= w; ++ bit) fast_walsh_hadamard_transform<T, '|'>(a[bit]), fast_walsh_hadamard_transform<T, '|'>(b[bit]);
	vector<T> r(n);
	for(auto bit = 0; bit <= w; ++ bit){
		vector<T> c(n);
		for(auto lbit = 0; lbit <= bit; ++ lbit) for(auto i = 0; i < n; ++ i) c[i] += a[lbit][i] * b[bit - lbit][i];
		fast_walsh_hadamard_transform<T, '|'>(c, true);
		for(auto i = 0; i < n; ++ i) if(__builtin_popcount(i) == bit) r[i] = c[i];
	}
	return r;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>convolute_subset</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
